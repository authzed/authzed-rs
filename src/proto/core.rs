// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `arrakisapi/api/core.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct RelationTuple {
    // message fields
    pub object_and_relation: ::protobuf::SingularPtrField<ObjectAndRelation>,
    pub user: ::protobuf::SingularPtrField<User>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelationTuple {
    fn default() -> &'a RelationTuple {
        <RelationTuple as ::protobuf::Message>::default_instance()
    }
}

impl RelationTuple {
    pub fn new() -> RelationTuple {
        ::std::default::Default::default()
    }

    // .ObjectAndRelation object_and_relation = 1;


    pub fn get_object_and_relation(&self) -> &ObjectAndRelation {
        self.object_and_relation.as_ref().unwrap_or_else(|| <ObjectAndRelation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_object_and_relation(&mut self) {
        self.object_and_relation.clear();
    }

    pub fn has_object_and_relation(&self) -> bool {
        self.object_and_relation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_object_and_relation(&mut self, v: ObjectAndRelation) {
        self.object_and_relation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object_and_relation(&mut self) -> &mut ObjectAndRelation {
        if self.object_and_relation.is_none() {
            self.object_and_relation.set_default();
        }
        self.object_and_relation.as_mut().unwrap()
    }

    // Take field
    pub fn take_object_and_relation(&mut self) -> ObjectAndRelation {
        self.object_and_relation.take().unwrap_or_else(|| ObjectAndRelation::new())
    }

    // .User user = 2;


    pub fn get_user(&self) -> &User {
        self.user.as_ref().unwrap_or_else(|| <User as ::protobuf::Message>::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: User) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut User {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> User {
        self.user.take().unwrap_or_else(|| User::new())
    }
}

impl ::protobuf::Message for RelationTuple {
    fn is_initialized(&self) -> bool {
        for v in &self.object_and_relation {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.object_and_relation)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.object_and_relation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.object_and_relation.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelationTuple {
        RelationTuple::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ObjectAndRelation>>(
                "object_and_relation",
                |m: &RelationTuple| { &m.object_and_relation },
                |m: &mut RelationTuple| { &mut m.object_and_relation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<User>>(
                "user",
                |m: &RelationTuple| { &m.user },
                |m: &mut RelationTuple| { &mut m.user },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelationTuple>(
                "RelationTuple",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelationTuple {
        static instance: ::protobuf::rt::LazyV2<RelationTuple> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelationTuple::new)
    }
}

impl ::protobuf::Clear for RelationTuple {
    fn clear(&mut self) {
        self.object_and_relation.clear();
        self.user.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelationTuple {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationTuple {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ObjectAndRelation {
    // message fields
    pub namespace: ::std::string::String,
    pub object_id: ::std::string::String,
    pub relation: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ObjectAndRelation {
    fn default() -> &'a ObjectAndRelation {
        <ObjectAndRelation as ::protobuf::Message>::default_instance()
    }
}

impl ObjectAndRelation {
    pub fn new() -> ObjectAndRelation {
        ::std::default::Default::default()
    }

    // string namespace = 1;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // string object_id = 2;


    pub fn get_object_id(&self) -> &str {
        &self.object_id
    }
    pub fn clear_object_id(&mut self) {
        self.object_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_object_id(&mut self, v: ::std::string::String) {
        self.object_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object_id(&mut self) -> &mut ::std::string::String {
        &mut self.object_id
    }

    // Take field
    pub fn take_object_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.object_id, ::std::string::String::new())
    }

    // string relation = 3;


    pub fn get_relation(&self) -> &str {
        &self.relation
    }
    pub fn clear_relation(&mut self) {
        self.relation.clear();
    }

    // Param is passed by value, moved
    pub fn set_relation(&mut self, v: ::std::string::String) {
        self.relation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relation(&mut self) -> &mut ::std::string::String {
        &mut self.relation
    }

    // Take field
    pub fn take_relation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relation, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ObjectAndRelation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.object_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.namespace);
        }
        if !self.object_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.object_id);
        }
        if !self.relation.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.relation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.namespace.is_empty() {
            os.write_string(1, &self.namespace)?;
        }
        if !self.object_id.is_empty() {
            os.write_string(2, &self.object_id)?;
        }
        if !self.relation.is_empty() {
            os.write_string(3, &self.relation)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ObjectAndRelation {
        ObjectAndRelation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &ObjectAndRelation| { &m.namespace },
                |m: &mut ObjectAndRelation| { &mut m.namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "object_id",
                |m: &ObjectAndRelation| { &m.object_id },
                |m: &mut ObjectAndRelation| { &mut m.object_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "relation",
                |m: &ObjectAndRelation| { &m.relation },
                |m: &mut ObjectAndRelation| { &mut m.relation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ObjectAndRelation>(
                "ObjectAndRelation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ObjectAndRelation {
        static instance: ::protobuf::rt::LazyV2<ObjectAndRelation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ObjectAndRelation::new)
    }
}

impl ::protobuf::Clear for ObjectAndRelation {
    fn clear(&mut self) {
        self.namespace.clear();
        self.object_id.clear();
        self.relation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ObjectAndRelation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ObjectAndRelation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct User {
    // message oneof groups
    pub user_oneof: ::std::option::Option<User_oneof_user_oneof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a User {
    fn default() -> &'a User {
        <User as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum User_oneof_user_oneof {
    user_id(u64),
    userset(ObjectAndRelation),
}

impl User {
    pub fn new() -> User {
        ::std::default::Default::default()
    }

    // uint64 user_id = 1;


    pub fn get_user_id(&self) -> u64 {
        match self.user_oneof {
            ::std::option::Option::Some(User_oneof_user_oneof::user_id(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_user_id(&mut self) {
        self.user_oneof = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        match self.user_oneof {
            ::std::option::Option::Some(User_oneof_user_oneof::user_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u64) {
        self.user_oneof = ::std::option::Option::Some(User_oneof_user_oneof::user_id(v))
    }

    // .ObjectAndRelation userset = 2;


    pub fn get_userset(&self) -> &ObjectAndRelation {
        match self.user_oneof {
            ::std::option::Option::Some(User_oneof_user_oneof::userset(ref v)) => v,
            _ => <ObjectAndRelation as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_userset(&mut self) {
        self.user_oneof = ::std::option::Option::None;
    }

    pub fn has_userset(&self) -> bool {
        match self.user_oneof {
            ::std::option::Option::Some(User_oneof_user_oneof::userset(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_userset(&mut self, v: ObjectAndRelation) {
        self.user_oneof = ::std::option::Option::Some(User_oneof_user_oneof::userset(v))
    }

    // Mutable pointer to the field.
    pub fn mut_userset(&mut self) -> &mut ObjectAndRelation {
        if let ::std::option::Option::Some(User_oneof_user_oneof::userset(_)) = self.user_oneof {
        } else {
            self.user_oneof = ::std::option::Option::Some(User_oneof_user_oneof::userset(ObjectAndRelation::new()));
        }
        match self.user_oneof {
            ::std::option::Option::Some(User_oneof_user_oneof::userset(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_userset(&mut self) -> ObjectAndRelation {
        if self.has_userset() {
            match self.user_oneof.take() {
                ::std::option::Option::Some(User_oneof_user_oneof::userset(v)) => v,
                _ => panic!(),
            }
        } else {
            ObjectAndRelation::new()
        }
    }
}

impl ::protobuf::Message for User {
    fn is_initialized(&self) -> bool {
        if let Some(User_oneof_user_oneof::userset(ref v)) = self.user_oneof {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.user_oneof = ::std::option::Option::Some(User_oneof_user_oneof::user_id(is.read_uint64()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.user_oneof = ::std::option::Option::Some(User_oneof_user_oneof::userset(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.user_oneof {
            match v {
                &User_oneof_user_oneof::user_id(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &User_oneof_user_oneof::userset(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.user_oneof {
            match v {
                &User_oneof_user_oneof::user_id(v) => {
                    os.write_uint64(1, v)?;
                },
                &User_oneof_user_oneof::userset(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> User {
        User::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor::<_>(
                "user_id",
                User::has_user_id,
                User::get_user_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ObjectAndRelation>(
                "userset",
                User::has_userset,
                User::get_userset,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<User>(
                "User",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static User {
        static instance: ::protobuf::rt::LazyV2<User> = ::protobuf::rt::LazyV2::INIT;
        instance.get(User::new)
    }
}

impl ::protobuf::Clear for User {
    fn clear(&mut self) {
        self.user_oneof = ::std::option::Option::None;
        self.user_oneof = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for User {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for User {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Zookie {
    // message fields
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Zookie {
    fn default() -> &'a Zookie {
        <Zookie as ::protobuf::Message>::default_instance()
    }
}

impl Zookie {
    pub fn new() -> Zookie {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Zookie {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Zookie {
        Zookie::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &Zookie| { &m.token },
                |m: &mut Zookie| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Zookie>(
                "Zookie",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Zookie {
        static instance: ::protobuf::rt::LazyV2<Zookie> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Zookie::new)
    }
}

impl ::protobuf::Clear for Zookie {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Zookie {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Zookie {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelationTupleUpdate {
    // message fields
    pub operation: RelationTupleUpdate_Operation,
    pub tuple: ::protobuf::SingularPtrField<RelationTuple>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelationTupleUpdate {
    fn default() -> &'a RelationTupleUpdate {
        <RelationTupleUpdate as ::protobuf::Message>::default_instance()
    }
}

impl RelationTupleUpdate {
    pub fn new() -> RelationTupleUpdate {
        ::std::default::Default::default()
    }

    // .RelationTupleUpdate.Operation operation = 1;


    pub fn get_operation(&self) -> RelationTupleUpdate_Operation {
        self.operation
    }
    pub fn clear_operation(&mut self) {
        self.operation = RelationTupleUpdate_Operation::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: RelationTupleUpdate_Operation) {
        self.operation = v;
    }

    // .RelationTuple tuple = 2;


    pub fn get_tuple(&self) -> &RelationTuple {
        self.tuple.as_ref().unwrap_or_else(|| <RelationTuple as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tuple(&mut self) {
        self.tuple.clear();
    }

    pub fn has_tuple(&self) -> bool {
        self.tuple.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tuple(&mut self, v: RelationTuple) {
        self.tuple = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tuple(&mut self) -> &mut RelationTuple {
        if self.tuple.is_none() {
            self.tuple.set_default();
        }
        self.tuple.as_mut().unwrap()
    }

    // Take field
    pub fn take_tuple(&mut self) -> RelationTuple {
        self.tuple.take().unwrap_or_else(|| RelationTuple::new())
    }
}

impl ::protobuf::Message for RelationTupleUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.tuple {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.operation, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tuple)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.operation != RelationTupleUpdate_Operation::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.operation);
        }
        if let Some(ref v) = self.tuple.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.operation != RelationTupleUpdate_Operation::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.operation))?;
        }
        if let Some(ref v) = self.tuple.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelationTupleUpdate {
        RelationTupleUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RelationTupleUpdate_Operation>>(
                "operation",
                |m: &RelationTupleUpdate| { &m.operation },
                |m: &mut RelationTupleUpdate| { &mut m.operation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelationTuple>>(
                "tuple",
                |m: &RelationTupleUpdate| { &m.tuple },
                |m: &mut RelationTupleUpdate| { &mut m.tuple },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelationTupleUpdate>(
                "RelationTupleUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelationTupleUpdate {
        static instance: ::protobuf::rt::LazyV2<RelationTupleUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelationTupleUpdate::new)
    }
}

impl ::protobuf::Clear for RelationTupleUpdate {
    fn clear(&mut self) {
        self.operation = RelationTupleUpdate_Operation::UNKNOWN;
        self.tuple.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelationTupleUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationTupleUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RelationTupleUpdate_Operation {
    UNKNOWN = 0,
    CREATE = 1,
    TOUCH = 2,
    DELETE = 3,
}

impl ::protobuf::ProtobufEnum for RelationTupleUpdate_Operation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RelationTupleUpdate_Operation> {
        match value {
            0 => ::std::option::Option::Some(RelationTupleUpdate_Operation::UNKNOWN),
            1 => ::std::option::Option::Some(RelationTupleUpdate_Operation::CREATE),
            2 => ::std::option::Option::Some(RelationTupleUpdate_Operation::TOUCH),
            3 => ::std::option::Option::Some(RelationTupleUpdate_Operation::DELETE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RelationTupleUpdate_Operation] = &[
            RelationTupleUpdate_Operation::UNKNOWN,
            RelationTupleUpdate_Operation::CREATE,
            RelationTupleUpdate_Operation::TOUCH,
            RelationTupleUpdate_Operation::DELETE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RelationTupleUpdate_Operation>("RelationTupleUpdate.Operation", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RelationTupleUpdate_Operation {
}

impl ::std::default::Default for RelationTupleUpdate_Operation {
    fn default() -> Self {
        RelationTupleUpdate_Operation::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationTupleUpdate_Operation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelationTupleTreeNode {
    // message fields
    pub expanded: ::protobuf::SingularPtrField<ObjectAndRelation>,
    // message oneof groups
    pub node_type: ::std::option::Option<RelationTupleTreeNode_oneof_node_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelationTupleTreeNode {
    fn default() -> &'a RelationTupleTreeNode {
        <RelationTupleTreeNode as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RelationTupleTreeNode_oneof_node_type {
    intermediate_node(SetOperationUserset),
    leaf_node(DirectUserset),
}

impl RelationTupleTreeNode {
    pub fn new() -> RelationTupleTreeNode {
        ::std::default::Default::default()
    }

    // .SetOperationUserset intermediate_node = 1;


    pub fn get_intermediate_node(&self) -> &SetOperationUserset {
        match self.node_type {
            ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::intermediate_node(ref v)) => v,
            _ => <SetOperationUserset as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_intermediate_node(&mut self) {
        self.node_type = ::std::option::Option::None;
    }

    pub fn has_intermediate_node(&self) -> bool {
        match self.node_type {
            ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::intermediate_node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_intermediate_node(&mut self, v: SetOperationUserset) {
        self.node_type = ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::intermediate_node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_intermediate_node(&mut self) -> &mut SetOperationUserset {
        if let ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::intermediate_node(_)) = self.node_type {
        } else {
            self.node_type = ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::intermediate_node(SetOperationUserset::new()));
        }
        match self.node_type {
            ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::intermediate_node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_intermediate_node(&mut self) -> SetOperationUserset {
        if self.has_intermediate_node() {
            match self.node_type.take() {
                ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::intermediate_node(v)) => v,
                _ => panic!(),
            }
        } else {
            SetOperationUserset::new()
        }
    }

    // .DirectUserset leaf_node = 2;


    pub fn get_leaf_node(&self) -> &DirectUserset {
        match self.node_type {
            ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::leaf_node(ref v)) => v,
            _ => <DirectUserset as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_leaf_node(&mut self) {
        self.node_type = ::std::option::Option::None;
    }

    pub fn has_leaf_node(&self) -> bool {
        match self.node_type {
            ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::leaf_node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_leaf_node(&mut self, v: DirectUserset) {
        self.node_type = ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::leaf_node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_leaf_node(&mut self) -> &mut DirectUserset {
        if let ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::leaf_node(_)) = self.node_type {
        } else {
            self.node_type = ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::leaf_node(DirectUserset::new()));
        }
        match self.node_type {
            ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::leaf_node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_leaf_node(&mut self) -> DirectUserset {
        if self.has_leaf_node() {
            match self.node_type.take() {
                ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::leaf_node(v)) => v,
                _ => panic!(),
            }
        } else {
            DirectUserset::new()
        }
    }

    // .ObjectAndRelation expanded = 3;


    pub fn get_expanded(&self) -> &ObjectAndRelation {
        self.expanded.as_ref().unwrap_or_else(|| <ObjectAndRelation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_expanded(&mut self) {
        self.expanded.clear();
    }

    pub fn has_expanded(&self) -> bool {
        self.expanded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expanded(&mut self, v: ObjectAndRelation) {
        self.expanded = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expanded(&mut self) -> &mut ObjectAndRelation {
        if self.expanded.is_none() {
            self.expanded.set_default();
        }
        self.expanded.as_mut().unwrap()
    }

    // Take field
    pub fn take_expanded(&mut self) -> ObjectAndRelation {
        self.expanded.take().unwrap_or_else(|| ObjectAndRelation::new())
    }
}

impl ::protobuf::Message for RelationTupleTreeNode {
    fn is_initialized(&self) -> bool {
        if let Some(RelationTupleTreeNode_oneof_node_type::intermediate_node(ref v)) = self.node_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RelationTupleTreeNode_oneof_node_type::leaf_node(ref v)) = self.node_type {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.expanded {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.node_type = ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::intermediate_node(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.node_type = ::std::option::Option::Some(RelationTupleTreeNode_oneof_node_type::leaf_node(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expanded)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.expanded.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.node_type {
            match v {
                &RelationTupleTreeNode_oneof_node_type::intermediate_node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RelationTupleTreeNode_oneof_node_type::leaf_node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.expanded.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.node_type {
            match v {
                &RelationTupleTreeNode_oneof_node_type::intermediate_node(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RelationTupleTreeNode_oneof_node_type::leaf_node(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelationTupleTreeNode {
        RelationTupleTreeNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetOperationUserset>(
                "intermediate_node",
                RelationTupleTreeNode::has_intermediate_node,
                RelationTupleTreeNode::get_intermediate_node,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DirectUserset>(
                "leaf_node",
                RelationTupleTreeNode::has_leaf_node,
                RelationTupleTreeNode::get_leaf_node,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ObjectAndRelation>>(
                "expanded",
                |m: &RelationTupleTreeNode| { &m.expanded },
                |m: &mut RelationTupleTreeNode| { &mut m.expanded },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelationTupleTreeNode>(
                "RelationTupleTreeNode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelationTupleTreeNode {
        static instance: ::protobuf::rt::LazyV2<RelationTupleTreeNode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelationTupleTreeNode::new)
    }
}

impl ::protobuf::Clear for RelationTupleTreeNode {
    fn clear(&mut self) {
        self.node_type = ::std::option::Option::None;
        self.node_type = ::std::option::Option::None;
        self.expanded.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelationTupleTreeNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationTupleTreeNode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetOperationUserset {
    // message fields
    pub operation: SetOperationUserset_Operation,
    pub child_nodes: ::protobuf::RepeatedField<RelationTupleTreeNode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetOperationUserset {
    fn default() -> &'a SetOperationUserset {
        <SetOperationUserset as ::protobuf::Message>::default_instance()
    }
}

impl SetOperationUserset {
    pub fn new() -> SetOperationUserset {
        ::std::default::Default::default()
    }

    // .SetOperationUserset.Operation operation = 1;


    pub fn get_operation(&self) -> SetOperationUserset_Operation {
        self.operation
    }
    pub fn clear_operation(&mut self) {
        self.operation = SetOperationUserset_Operation::INVALID;
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: SetOperationUserset_Operation) {
        self.operation = v;
    }

    // repeated .RelationTupleTreeNode child_nodes = 2;


    pub fn get_child_nodes(&self) -> &[RelationTupleTreeNode] {
        &self.child_nodes
    }
    pub fn clear_child_nodes(&mut self) {
        self.child_nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_child_nodes(&mut self, v: ::protobuf::RepeatedField<RelationTupleTreeNode>) {
        self.child_nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_child_nodes(&mut self) -> &mut ::protobuf::RepeatedField<RelationTupleTreeNode> {
        &mut self.child_nodes
    }

    // Take field
    pub fn take_child_nodes(&mut self) -> ::protobuf::RepeatedField<RelationTupleTreeNode> {
        ::std::mem::replace(&mut self.child_nodes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SetOperationUserset {
    fn is_initialized(&self) -> bool {
        for v in &self.child_nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.operation, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.child_nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.operation != SetOperationUserset_Operation::INVALID {
            my_size += ::protobuf::rt::enum_size(1, self.operation);
        }
        for value in &self.child_nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.operation != SetOperationUserset_Operation::INVALID {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.operation))?;
        }
        for v in &self.child_nodes {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetOperationUserset {
        SetOperationUserset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SetOperationUserset_Operation>>(
                "operation",
                |m: &SetOperationUserset| { &m.operation },
                |m: &mut SetOperationUserset| { &mut m.operation },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelationTupleTreeNode>>(
                "child_nodes",
                |m: &SetOperationUserset| { &m.child_nodes },
                |m: &mut SetOperationUserset| { &mut m.child_nodes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetOperationUserset>(
                "SetOperationUserset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetOperationUserset {
        static instance: ::protobuf::rt::LazyV2<SetOperationUserset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetOperationUserset::new)
    }
}

impl ::protobuf::Clear for SetOperationUserset {
    fn clear(&mut self) {
        self.operation = SetOperationUserset_Operation::INVALID;
        self.child_nodes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetOperationUserset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetOperationUserset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SetOperationUserset_Operation {
    INVALID = 0,
    UNION = 1,
    INTERSECTION = 2,
    EXCLUSION = 3,
}

impl ::protobuf::ProtobufEnum for SetOperationUserset_Operation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SetOperationUserset_Operation> {
        match value {
            0 => ::std::option::Option::Some(SetOperationUserset_Operation::INVALID),
            1 => ::std::option::Option::Some(SetOperationUserset_Operation::UNION),
            2 => ::std::option::Option::Some(SetOperationUserset_Operation::INTERSECTION),
            3 => ::std::option::Option::Some(SetOperationUserset_Operation::EXCLUSION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SetOperationUserset_Operation] = &[
            SetOperationUserset_Operation::INVALID,
            SetOperationUserset_Operation::UNION,
            SetOperationUserset_Operation::INTERSECTION,
            SetOperationUserset_Operation::EXCLUSION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SetOperationUserset_Operation>("SetOperationUserset.Operation", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SetOperationUserset_Operation {
}

impl ::std::default::Default for SetOperationUserset_Operation {
    fn default() -> Self {
        SetOperationUserset_Operation::INVALID
    }
}

impl ::protobuf::reflect::ProtobufValue for SetOperationUserset_Operation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DirectUserset {
    // message fields
    pub users: ::protobuf::RepeatedField<User>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DirectUserset {
    fn default() -> &'a DirectUserset {
        <DirectUserset as ::protobuf::Message>::default_instance()
    }
}

impl DirectUserset {
    pub fn new() -> DirectUserset {
        ::std::default::Default::default()
    }

    // repeated .User users = 1;


    pub fn get_users(&self) -> &[User] {
        &self.users
    }
    pub fn clear_users(&mut self) {
        self.users.clear();
    }

    // Param is passed by value, moved
    pub fn set_users(&mut self, v: ::protobuf::RepeatedField<User>) {
        self.users = v;
    }

    // Mutable pointer to the field.
    pub fn mut_users(&mut self) -> &mut ::protobuf::RepeatedField<User> {
        &mut self.users
    }

    // Take field
    pub fn take_users(&mut self) -> ::protobuf::RepeatedField<User> {
        ::std::mem::replace(&mut self.users, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DirectUserset {
    fn is_initialized(&self) -> bool {
        for v in &self.users {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.users)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.users {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.users {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DirectUserset {
        DirectUserset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<User>>(
                "users",
                |m: &DirectUserset| { &m.users },
                |m: &mut DirectUserset| { &mut m.users },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DirectUserset>(
                "DirectUserset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DirectUserset {
        static instance: ::protobuf::rt::LazyV2<DirectUserset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DirectUserset::new)
    }
}

impl ::protobuf::Clear for DirectUserset {
    fn clear(&mut self) {
        self.users.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DirectUserset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DirectUserset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19arrakisapi/api/core.proto\"n\n\rRelationTuple\x12B\n\x13object_and\
    _relation\x18\x01\x20\x01(\x0b2\x12.ObjectAndRelationR\x11objectAndRelat\
    ion\x12\x19\n\x04user\x18\x02\x20\x01(\x0b2\x05.UserR\x04user\"j\n\x11Ob\
    jectAndRelation\x12\x1c\n\tnamespace\x18\x01\x20\x01(\tR\tnamespace\x12\
    \x1b\n\tobject_id\x18\x02\x20\x01(\tR\x08objectId\x12\x1a\n\x08relation\
    \x18\x03\x20\x01(\tR\x08relation\"_\n\x04User\x12\x19\n\x07user_id\x18\
    \x01\x20\x01(\x04H\0R\x06userId\x12.\n\x07userset\x18\x02\x20\x01(\x0b2\
    \x12.ObjectAndRelationH\0R\x07usersetB\x0c\n\nuser_oneof\"\x1e\n\x06Zook\
    ie\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\"\xb6\x01\n\x13Relati\
    onTupleUpdate\x12<\n\toperation\x18\x01\x20\x01(\x0e2\x1e.RelationTupleU\
    pdate.OperationR\toperation\x12$\n\x05tuple\x18\x02\x20\x01(\x0b2\x0e.Re\
    lationTupleR\x05tuple\";\n\tOperation\x12\x0b\n\x07UNKNOWN\x10\0\x12\n\n\
    \x06CREATE\x10\x01\x12\t\n\x05TOUCH\x10\x02\x12\n\n\x06DELETE\x10\x03\"\
    \xc8\x01\n\x15RelationTupleTreeNode\x12C\n\x11intermediate_node\x18\x01\
    \x20\x01(\x0b2\x14.SetOperationUsersetH\0R\x10intermediateNode\x12-\n\tl\
    eaf_node\x18\x02\x20\x01(\x0b2\x0e.DirectUsersetH\0R\x08leafNode\x12.\n\
    \x08expanded\x18\x03\x20\x01(\x0b2\x12.ObjectAndRelationR\x08expandedB\
    \x0b\n\tnode_type\"\xd2\x01\n\x13SetOperationUserset\x12<\n\toperation\
    \x18\x01\x20\x01(\x0e2\x1e.SetOperationUserset.OperationR\toperation\x12\
    7\n\x0bchild_nodes\x18\x02\x20\x03(\x0b2\x16.RelationTupleTreeNodeR\nchi\
    ldNodes\"D\n\tOperation\x12\x0b\n\x07INVALID\x10\0\x12\t\n\x05UNION\x10\
    \x01\x12\x10\n\x0cINTERSECTION\x10\x02\x12\r\n\tEXCLUSION\x10\x03\",\n\r\
    DirectUserset\x12\x1b\n\x05users\x18\x01\x20\x03(\x0b2\x05.UserR\x05user\
    sB&Z$github.com/petricorp/code/arrakisapiJ\x9a\x11\n\x06\x12\x04\0\082\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0;\n\t\n\x02\
    \x08\x0b\x12\x03\x02\0;\n\n\n\x02\x04\0\x12\x04\x04\0\x12\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x04\x08\x15\n\xcd\x04\n\x04\x04\0\x02\0\x12\x03\x10\
    \x02,\x1a\xbf\x04\x20Each\x20tupleset\x20specifies\x20keys\x20of\x20a\
    \x20set\x20of\x20relation\x20tuples.\x20The\x20set\x20can\n\x20include\
    \x20a\x20single\x20tuple\x20key,\x20or\x20all\x20tuples\x20with\x20a\x20\
    given\x20object\x20ID\x20or\n\x20userset\x20in\x20a\x20namespace,\x20opt\
    ionally\x20constrained\x20by\x20a\x20relation\x20name.\n\n\x20examples:\
    \n\x20doc:readme#viewer@group:eng#member\x20(fully\x20specified)\n\x20do\
    c:*#*#group:eng#member\x20(all\x20tuples\x20that\x20this\x20userset\x20r\
    elates\x20to)\n\x20doc:12345#*#*\x20(all\x20tuples\x20with\x20a\x20direc\
    t\x20relationship\x20to\x20a\x20document)\n\x20doc:12345#writer#*\x20(al\
    l\x20tuples\x20with\x20direct\x20write\x20relationship\x20with\x20the\n\
    \x20document)\x20doc:#writer#group:eng#member\x20(all\x20tuples\x20that\
    \x20eng\x20group\x20has\x20write\n\x20relationship)\n\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03\x10\x02\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x10\
    \x14'\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10*+\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x11\x02\x10\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x11\x02\
    \x06\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x11\x07\x0b\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x11\x0e\x0f\n\n\n\x02\x04\x01\x12\x04\x14\0\x18\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\x14\x08\x19\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x15\x02\x17\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x15\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x15\t\x12\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x15\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x16\x02\x17\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x16\t\x12\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x16\x15\x16\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x17\x02\x16\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x17\t\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x17\x14\x15\n\
    \n\n\x02\x04\x02\x12\x04\x1a\0\x1f\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1a\
    \x08\x0c\n\x0c\n\x04\x04\x02\x08\0\x12\x04\x1b\x02\x1e\x03\n\x0c\n\x05\
    \x04\x02\x08\0\x01\x12\x03\x1b\x08\x12\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x1c\x04\x17\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x1c\x0b\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x1c\x15\x16\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1d\x04\"\n\x0c\n\
    \x05\x04\x02\x02\x01\x06\x12\x03\x1d\x04\x15\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x1d\x16\x1d\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1d\x20\
    !\n\t\n\x02\x04\x03\x12\x03!\0$\n\n\n\x03\x04\x03\x01\x12\x03!\x08\x0e\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03!\x11\"\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03!\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03!\x18\x1d\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03!\x20!\n\n\n\x02\x04\x04\x12\x04#\0'\x01\n\
    \n\n\x03\x04\x04\x01\x12\x03#\x08\x1b\n\x0b\n\x04\x04\x04\x04\0\x12\x03$\
    \x02D\n\x0c\n\x05\x04\x04\x04\0\x01\x12\x03$\x07\x10\n\r\n\x06\x04\x04\
    \x04\0\x02\0\x12\x03$\x13\x1f\n\x0e\n\x07\x04\x04\x04\0\x02\0\x01\x12\
    \x03$\x13\x1a\n\x0e\n\x07\x04\x04\x04\0\x02\0\x02\x12\x03$\x1d\x1e\n\r\n\
    \x06\x04\x04\x04\0\x02\x01\x12\x03$\x20+\n\x0e\n\x07\x04\x04\x04\0\x02\
    \x01\x01\x12\x03$\x20&\n\x0e\n\x07\x04\x04\x04\0\x02\x01\x02\x12\x03$)*\
    \n\r\n\x06\x04\x04\x04\0\x02\x02\x12\x03$,6\n\x0e\n\x07\x04\x04\x04\0\
    \x02\x02\x01\x12\x03$,1\n\x0e\n\x07\x04\x04\x04\0\x02\x02\x02\x12\x03$45\
    \n\r\n\x06\x04\x04\x04\0\x02\x03\x12\x03$7B\n\x0e\n\x07\x04\x04\x04\0\
    \x02\x03\x01\x12\x03$7=\n\x0e\n\x07\x04\x04\x04\0\x02\x03\x02\x12\x03$@A\
    \n\x0b\n\x04\x04\x04\x02\0\x12\x03%\x02\x1a\n\x0c\n\x05\x04\x04\x02\0\
    \x06\x12\x03%\x02\x0b\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03%\x0c\x15\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03%\x18\x19\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03&\x02\x1a\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03&\x02\x0f\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03&\x10\x15\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03&\x18\x19\n\n\n\x02\x04\x05\x12\x04)\0/\x01\n\n\n\x03\
    \x04\x05\x01\x12\x03)\x08\x1d\n\x0c\n\x04\x04\x05\x08\0\x12\x04*\x02-\
    \x03\n\x0c\n\x05\x04\x05\x08\0\x01\x12\x03*\x08\x11\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x03+\x04.\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03+\x04\x17\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03+\x18)\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03+,-\n\x0b\n\x04\x04\x05\x02\x01\x12\x03,\x04\x20\n\x0c\n\x05\x04\
    \x05\x02\x01\x06\x12\x03,\x04\x11\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\
    \x03,\x12\x1b\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03,\x1e\x1f\n\x0b\n\
    \x04\x04\x05\x02\x02\x12\x03.\x02!\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\
    \x03.\x02\x13\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03.\x14\x1c\n\x0c\n\
    \x05\x04\x05\x02\x02\x03\x12\x03.\x1f\x20\n\n\n\x02\x04\x06\x12\x041\06\
    \x01\n\n\n\x03\x04\x06\x01\x12\x031\x08\x1b\n\x0b\n\x04\x04\x06\x04\0\
    \x12\x032\x02M\n\x0c\n\x05\x04\x06\x04\0\x01\x12\x032\x07\x10\n\r\n\x06\
    \x04\x06\x04\0\x02\0\x12\x032\x13\x1f\n\x0e\n\x07\x04\x06\x04\0\x02\0\
    \x01\x12\x032\x13\x1a\n\x0e\n\x07\x04\x06\x04\0\x02\0\x02\x12\x032\x1d\
    \x1e\n\r\n\x06\x04\x06\x04\0\x02\x01\x12\x032\x20*\n\x0e\n\x07\x04\x06\
    \x04\0\x02\x01\x01\x12\x032\x20%\n\x0e\n\x07\x04\x06\x04\0\x02\x01\x02\
    \x12\x032()\n\r\n\x06\x04\x06\x04\0\x02\x02\x12\x032+<\n\x0e\n\x07\x04\
    \x06\x04\0\x02\x02\x01\x12\x032+7\n\x0e\n\x07\x04\x06\x04\0\x02\x02\x02\
    \x12\x032:;\n\r\n\x06\x04\x06\x04\0\x02\x03\x12\x032=K\n\x0e\n\x07\x04\
    \x06\x04\0\x02\x03\x01\x12\x032=F\n\x0e\n\x07\x04\x06\x04\0\x02\x03\x02\
    \x12\x032IJ\n\x0b\n\x04\x04\x06\x02\0\x12\x034\x02\x1a\n\x0c\n\x05\x04\
    \x06\x02\0\x06\x12\x034\x02\x0b\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x034\
    \x0c\x15\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x034\x18\x19\n\x0b\n\x04\x04\
    \x06\x02\x01\x12\x035\x021\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x035\x02\
    \n\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x035\x0b\x20\n\x0c\n\x05\x04\x06\
    \x02\x01\x01\x12\x035!,\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x035/0\n\t\n\
    \x02\x04\x07\x12\x038\02\n\n\n\x03\x04\x07\x01\x12\x038\x08\x15\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x038\x180\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x038\
    \x18\x20\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x038!%\n\x0c\n\x05\x04\x07\
    \x02\0\x01\x12\x038&+\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x038./b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
