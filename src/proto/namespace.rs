// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `arrakisapi/api/namespace.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct NamespaceDefinition {
    // message fields
    pub name: ::std::string::String,
    pub relation: ::protobuf::RepeatedField<Relation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NamespaceDefinition {
    fn default() -> &'a NamespaceDefinition {
        <NamespaceDefinition as ::protobuf::Message>::default_instance()
    }
}

impl NamespaceDefinition {
    pub fn new() -> NamespaceDefinition {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .Relation relation = 2;


    pub fn get_relation(&self) -> &[Relation] {
        &self.relation
    }
    pub fn clear_relation(&mut self) {
        self.relation.clear();
    }

    // Param is passed by value, moved
    pub fn set_relation(&mut self, v: ::protobuf::RepeatedField<Relation>) {
        self.relation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_relation(&mut self) -> &mut ::protobuf::RepeatedField<Relation> {
        &mut self.relation
    }

    // Take field
    pub fn take_relation(&mut self) -> ::protobuf::RepeatedField<Relation> {
        ::std::mem::replace(&mut self.relation, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for NamespaceDefinition {
    fn is_initialized(&self) -> bool {
        for v in &self.relation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.relation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.relation {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.relation {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NamespaceDefinition {
        NamespaceDefinition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &NamespaceDefinition| { &m.name },
                |m: &mut NamespaceDefinition| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Relation>>(
                "relation",
                |m: &NamespaceDefinition| { &m.relation },
                |m: &mut NamespaceDefinition| { &mut m.relation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NamespaceDefinition>(
                "NamespaceDefinition",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NamespaceDefinition {
        static instance: ::protobuf::rt::LazyV2<NamespaceDefinition> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NamespaceDefinition::new)
    }
}

impl ::protobuf::Clear for NamespaceDefinition {
    fn clear(&mut self) {
        self.name.clear();
        self.relation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NamespaceDefinition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NamespaceDefinition {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Relation {
    // message fields
    pub name: ::std::string::String,
    pub userset_rewrite: ::protobuf::SingularPtrField<UsersetRewrite>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Relation {
    fn default() -> &'a Relation {
        <Relation as ::protobuf::Message>::default_instance()
    }
}

impl Relation {
    pub fn new() -> Relation {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .UsersetRewrite userset_rewrite = 2;


    pub fn get_userset_rewrite(&self) -> &UsersetRewrite {
        self.userset_rewrite.as_ref().unwrap_or_else(|| <UsersetRewrite as ::protobuf::Message>::default_instance())
    }
    pub fn clear_userset_rewrite(&mut self) {
        self.userset_rewrite.clear();
    }

    pub fn has_userset_rewrite(&self) -> bool {
        self.userset_rewrite.is_some()
    }

    // Param is passed by value, moved
    pub fn set_userset_rewrite(&mut self, v: UsersetRewrite) {
        self.userset_rewrite = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_userset_rewrite(&mut self) -> &mut UsersetRewrite {
        if self.userset_rewrite.is_none() {
            self.userset_rewrite.set_default();
        }
        self.userset_rewrite.as_mut().unwrap()
    }

    // Take field
    pub fn take_userset_rewrite(&mut self) -> UsersetRewrite {
        self.userset_rewrite.take().unwrap_or_else(|| UsersetRewrite::new())
    }
}

impl ::protobuf::Message for Relation {
    fn is_initialized(&self) -> bool {
        for v in &self.userset_rewrite {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.userset_rewrite)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.userset_rewrite.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.userset_rewrite.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Relation {
        Relation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Relation| { &m.name },
                |m: &mut Relation| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UsersetRewrite>>(
                "userset_rewrite",
                |m: &Relation| { &m.userset_rewrite },
                |m: &mut Relation| { &mut m.userset_rewrite },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Relation>(
                "Relation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Relation {
        static instance: ::protobuf::rt::LazyV2<Relation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Relation::new)
    }
}

impl ::protobuf::Clear for Relation {
    fn clear(&mut self) {
        self.name.clear();
        self.userset_rewrite.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Relation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Relation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UsersetRewrite {
    // message oneof groups
    pub rewrite_operation: ::std::option::Option<UsersetRewrite_oneof_rewrite_operation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UsersetRewrite {
    fn default() -> &'a UsersetRewrite {
        <UsersetRewrite as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum UsersetRewrite_oneof_rewrite_operation {
    union(SetOperation),
    intersection(SetOperation),
    exclusion(SetOperation),
}

impl UsersetRewrite {
    pub fn new() -> UsersetRewrite {
        ::std::default::Default::default()
    }

    // .SetOperation union = 1;


    pub fn get_union(&self) -> &SetOperation {
        match self.rewrite_operation {
            ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::union(ref v)) => v,
            _ => <SetOperation as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_union(&mut self) {
        self.rewrite_operation = ::std::option::Option::None;
    }

    pub fn has_union(&self) -> bool {
        match self.rewrite_operation {
            ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::union(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_union(&mut self, v: SetOperation) {
        self.rewrite_operation = ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::union(v))
    }

    // Mutable pointer to the field.
    pub fn mut_union(&mut self) -> &mut SetOperation {
        if let ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::union(_)) = self.rewrite_operation {
        } else {
            self.rewrite_operation = ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::union(SetOperation::new()));
        }
        match self.rewrite_operation {
            ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::union(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_union(&mut self) -> SetOperation {
        if self.has_union() {
            match self.rewrite_operation.take() {
                ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::union(v)) => v,
                _ => panic!(),
            }
        } else {
            SetOperation::new()
        }
    }

    // .SetOperation intersection = 2;


    pub fn get_intersection(&self) -> &SetOperation {
        match self.rewrite_operation {
            ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::intersection(ref v)) => v,
            _ => <SetOperation as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_intersection(&mut self) {
        self.rewrite_operation = ::std::option::Option::None;
    }

    pub fn has_intersection(&self) -> bool {
        match self.rewrite_operation {
            ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::intersection(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_intersection(&mut self, v: SetOperation) {
        self.rewrite_operation = ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::intersection(v))
    }

    // Mutable pointer to the field.
    pub fn mut_intersection(&mut self) -> &mut SetOperation {
        if let ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::intersection(_)) = self.rewrite_operation {
        } else {
            self.rewrite_operation = ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::intersection(SetOperation::new()));
        }
        match self.rewrite_operation {
            ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::intersection(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_intersection(&mut self) -> SetOperation {
        if self.has_intersection() {
            match self.rewrite_operation.take() {
                ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::intersection(v)) => v,
                _ => panic!(),
            }
        } else {
            SetOperation::new()
        }
    }

    // .SetOperation exclusion = 3;


    pub fn get_exclusion(&self) -> &SetOperation {
        match self.rewrite_operation {
            ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::exclusion(ref v)) => v,
            _ => <SetOperation as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_exclusion(&mut self) {
        self.rewrite_operation = ::std::option::Option::None;
    }

    pub fn has_exclusion(&self) -> bool {
        match self.rewrite_operation {
            ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::exclusion(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exclusion(&mut self, v: SetOperation) {
        self.rewrite_operation = ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::exclusion(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exclusion(&mut self) -> &mut SetOperation {
        if let ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::exclusion(_)) = self.rewrite_operation {
        } else {
            self.rewrite_operation = ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::exclusion(SetOperation::new()));
        }
        match self.rewrite_operation {
            ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::exclusion(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exclusion(&mut self) -> SetOperation {
        if self.has_exclusion() {
            match self.rewrite_operation.take() {
                ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::exclusion(v)) => v,
                _ => panic!(),
            }
        } else {
            SetOperation::new()
        }
    }
}

impl ::protobuf::Message for UsersetRewrite {
    fn is_initialized(&self) -> bool {
        if let Some(UsersetRewrite_oneof_rewrite_operation::union(ref v)) = self.rewrite_operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(UsersetRewrite_oneof_rewrite_operation::intersection(ref v)) = self.rewrite_operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(UsersetRewrite_oneof_rewrite_operation::exclusion(ref v)) = self.rewrite_operation {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rewrite_operation = ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::union(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rewrite_operation = ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::intersection(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rewrite_operation = ::std::option::Option::Some(UsersetRewrite_oneof_rewrite_operation::exclusion(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.rewrite_operation {
            match v {
                &UsersetRewrite_oneof_rewrite_operation::union(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &UsersetRewrite_oneof_rewrite_operation::intersection(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &UsersetRewrite_oneof_rewrite_operation::exclusion(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.rewrite_operation {
            match v {
                &UsersetRewrite_oneof_rewrite_operation::union(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &UsersetRewrite_oneof_rewrite_operation::intersection(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &UsersetRewrite_oneof_rewrite_operation::exclusion(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UsersetRewrite {
        UsersetRewrite::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetOperation>(
                "union",
                UsersetRewrite::has_union,
                UsersetRewrite::get_union,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetOperation>(
                "intersection",
                UsersetRewrite::has_intersection,
                UsersetRewrite::get_intersection,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetOperation>(
                "exclusion",
                UsersetRewrite::has_exclusion,
                UsersetRewrite::get_exclusion,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UsersetRewrite>(
                "UsersetRewrite",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UsersetRewrite {
        static instance: ::protobuf::rt::LazyV2<UsersetRewrite> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UsersetRewrite::new)
    }
}

impl ::protobuf::Clear for UsersetRewrite {
    fn clear(&mut self) {
        self.rewrite_operation = ::std::option::Option::None;
        self.rewrite_operation = ::std::option::Option::None;
        self.rewrite_operation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UsersetRewrite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UsersetRewrite {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetOperation {
    // message fields
    pub child: ::protobuf::RepeatedField<SetOperation_Child>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetOperation {
    fn default() -> &'a SetOperation {
        <SetOperation as ::protobuf::Message>::default_instance()
    }
}

impl SetOperation {
    pub fn new() -> SetOperation {
        ::std::default::Default::default()
    }

    // repeated .SetOperation.Child child = 1;


    pub fn get_child(&self) -> &[SetOperation_Child] {
        &self.child
    }
    pub fn clear_child(&mut self) {
        self.child.clear();
    }

    // Param is passed by value, moved
    pub fn set_child(&mut self, v: ::protobuf::RepeatedField<SetOperation_Child>) {
        self.child = v;
    }

    // Mutable pointer to the field.
    pub fn mut_child(&mut self) -> &mut ::protobuf::RepeatedField<SetOperation_Child> {
        &mut self.child
    }

    // Take field
    pub fn take_child(&mut self) -> ::protobuf::RepeatedField<SetOperation_Child> {
        ::std::mem::replace(&mut self.child, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SetOperation {
    fn is_initialized(&self) -> bool {
        for v in &self.child {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.child)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.child {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.child {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetOperation {
        SetOperation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SetOperation_Child>>(
                "child",
                |m: &SetOperation| { &m.child },
                |m: &mut SetOperation| { &mut m.child },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetOperation>(
                "SetOperation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetOperation {
        static instance: ::protobuf::rt::LazyV2<SetOperation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetOperation::new)
    }
}

impl ::protobuf::Clear for SetOperation {
    fn clear(&mut self) {
        self.child.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetOperation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetOperation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetOperation_Child {
    // message oneof groups
    pub child_type: ::std::option::Option<SetOperation_Child_oneof_child_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetOperation_Child {
    fn default() -> &'a SetOperation_Child {
        <SetOperation_Child as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SetOperation_Child_oneof_child_type {
    _this(SetOperation_Child_This),
    computed_userset(ComputedUserset),
    tuple_to_userset(TupleToUserset),
    userset_rewrite(UsersetRewrite),
}

impl SetOperation_Child {
    pub fn new() -> SetOperation_Child {
        ::std::default::Default::default()
    }

    // .SetOperation.Child.This _this = 1;


    pub fn get__this(&self) -> &SetOperation_Child_This {
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::_this(ref v)) => v,
            _ => <SetOperation_Child_This as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear__this(&mut self) {
        self.child_type = ::std::option::Option::None;
    }

    pub fn has__this(&self) -> bool {
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::_this(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set__this(&mut self, v: SetOperation_Child_This) {
        self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::_this(v))
    }

    // Mutable pointer to the field.
    pub fn mut__this(&mut self) -> &mut SetOperation_Child_This {
        if let ::std::option::Option::Some(SetOperation_Child_oneof_child_type::_this(_)) = self.child_type {
        } else {
            self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::_this(SetOperation_Child_This::new()));
        }
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::_this(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take__this(&mut self) -> SetOperation_Child_This {
        if self.has__this() {
            match self.child_type.take() {
                ::std::option::Option::Some(SetOperation_Child_oneof_child_type::_this(v)) => v,
                _ => panic!(),
            }
        } else {
            SetOperation_Child_This::new()
        }
    }

    // .ComputedUserset computed_userset = 2;


    pub fn get_computed_userset(&self) -> &ComputedUserset {
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::computed_userset(ref v)) => v,
            _ => <ComputedUserset as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_computed_userset(&mut self) {
        self.child_type = ::std::option::Option::None;
    }

    pub fn has_computed_userset(&self) -> bool {
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::computed_userset(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_computed_userset(&mut self, v: ComputedUserset) {
        self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::computed_userset(v))
    }

    // Mutable pointer to the field.
    pub fn mut_computed_userset(&mut self) -> &mut ComputedUserset {
        if let ::std::option::Option::Some(SetOperation_Child_oneof_child_type::computed_userset(_)) = self.child_type {
        } else {
            self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::computed_userset(ComputedUserset::new()));
        }
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::computed_userset(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_computed_userset(&mut self) -> ComputedUserset {
        if self.has_computed_userset() {
            match self.child_type.take() {
                ::std::option::Option::Some(SetOperation_Child_oneof_child_type::computed_userset(v)) => v,
                _ => panic!(),
            }
        } else {
            ComputedUserset::new()
        }
    }

    // .TupleToUserset tuple_to_userset = 3;


    pub fn get_tuple_to_userset(&self) -> &TupleToUserset {
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::tuple_to_userset(ref v)) => v,
            _ => <TupleToUserset as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_tuple_to_userset(&mut self) {
        self.child_type = ::std::option::Option::None;
    }

    pub fn has_tuple_to_userset(&self) -> bool {
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::tuple_to_userset(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tuple_to_userset(&mut self, v: TupleToUserset) {
        self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::tuple_to_userset(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tuple_to_userset(&mut self) -> &mut TupleToUserset {
        if let ::std::option::Option::Some(SetOperation_Child_oneof_child_type::tuple_to_userset(_)) = self.child_type {
        } else {
            self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::tuple_to_userset(TupleToUserset::new()));
        }
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::tuple_to_userset(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tuple_to_userset(&mut self) -> TupleToUserset {
        if self.has_tuple_to_userset() {
            match self.child_type.take() {
                ::std::option::Option::Some(SetOperation_Child_oneof_child_type::tuple_to_userset(v)) => v,
                _ => panic!(),
            }
        } else {
            TupleToUserset::new()
        }
    }

    // .UsersetRewrite userset_rewrite = 4;


    pub fn get_userset_rewrite(&self) -> &UsersetRewrite {
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::userset_rewrite(ref v)) => v,
            _ => <UsersetRewrite as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_userset_rewrite(&mut self) {
        self.child_type = ::std::option::Option::None;
    }

    pub fn has_userset_rewrite(&self) -> bool {
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::userset_rewrite(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_userset_rewrite(&mut self, v: UsersetRewrite) {
        self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::userset_rewrite(v))
    }

    // Mutable pointer to the field.
    pub fn mut_userset_rewrite(&mut self) -> &mut UsersetRewrite {
        if let ::std::option::Option::Some(SetOperation_Child_oneof_child_type::userset_rewrite(_)) = self.child_type {
        } else {
            self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::userset_rewrite(UsersetRewrite::new()));
        }
        match self.child_type {
            ::std::option::Option::Some(SetOperation_Child_oneof_child_type::userset_rewrite(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_userset_rewrite(&mut self) -> UsersetRewrite {
        if self.has_userset_rewrite() {
            match self.child_type.take() {
                ::std::option::Option::Some(SetOperation_Child_oneof_child_type::userset_rewrite(v)) => v,
                _ => panic!(),
            }
        } else {
            UsersetRewrite::new()
        }
    }
}

impl ::protobuf::Message for SetOperation_Child {
    fn is_initialized(&self) -> bool {
        if let Some(SetOperation_Child_oneof_child_type::_this(ref v)) = self.child_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetOperation_Child_oneof_child_type::computed_userset(ref v)) = self.child_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetOperation_Child_oneof_child_type::tuple_to_userset(ref v)) = self.child_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetOperation_Child_oneof_child_type::userset_rewrite(ref v)) = self.child_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::_this(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::computed_userset(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::tuple_to_userset(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.child_type = ::std::option::Option::Some(SetOperation_Child_oneof_child_type::userset_rewrite(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.child_type {
            match v {
                &SetOperation_Child_oneof_child_type::_this(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetOperation_Child_oneof_child_type::computed_userset(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetOperation_Child_oneof_child_type::tuple_to_userset(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetOperation_Child_oneof_child_type::userset_rewrite(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.child_type {
            match v {
                &SetOperation_Child_oneof_child_type::_this(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetOperation_Child_oneof_child_type::computed_userset(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetOperation_Child_oneof_child_type::tuple_to_userset(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetOperation_Child_oneof_child_type::userset_rewrite(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetOperation_Child {
        SetOperation_Child::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetOperation_Child_This>(
                "_this",
                SetOperation_Child::has__this,
                SetOperation_Child::get__this,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ComputedUserset>(
                "computed_userset",
                SetOperation_Child::has_computed_userset,
                SetOperation_Child::get_computed_userset,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TupleToUserset>(
                "tuple_to_userset",
                SetOperation_Child::has_tuple_to_userset,
                SetOperation_Child::get_tuple_to_userset,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UsersetRewrite>(
                "userset_rewrite",
                SetOperation_Child::has_userset_rewrite,
                SetOperation_Child::get_userset_rewrite,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetOperation_Child>(
                "SetOperation.Child",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetOperation_Child {
        static instance: ::protobuf::rt::LazyV2<SetOperation_Child> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetOperation_Child::new)
    }
}

impl ::protobuf::Clear for SetOperation_Child {
    fn clear(&mut self) {
        self.child_type = ::std::option::Option::None;
        self.child_type = ::std::option::Option::None;
        self.child_type = ::std::option::Option::None;
        self.child_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetOperation_Child {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetOperation_Child {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetOperation_Child_This {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetOperation_Child_This {
    fn default() -> &'a SetOperation_Child_This {
        <SetOperation_Child_This as ::protobuf::Message>::default_instance()
    }
}

impl SetOperation_Child_This {
    pub fn new() -> SetOperation_Child_This {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SetOperation_Child_This {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetOperation_Child_This {
        SetOperation_Child_This::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetOperation_Child_This>(
                "SetOperation.Child.This",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetOperation_Child_This {
        static instance: ::protobuf::rt::LazyV2<SetOperation_Child_This> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetOperation_Child_This::new)
    }
}

impl ::protobuf::Clear for SetOperation_Child_This {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetOperation_Child_This {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetOperation_Child_This {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TupleToUserset {
    // message fields
    pub tupleset: ::protobuf::SingularPtrField<TupleToUserset_Tupleset>,
    pub computed_userset: ::protobuf::SingularPtrField<ComputedUserset>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TupleToUserset {
    fn default() -> &'a TupleToUserset {
        <TupleToUserset as ::protobuf::Message>::default_instance()
    }
}

impl TupleToUserset {
    pub fn new() -> TupleToUserset {
        ::std::default::Default::default()
    }

    // .TupleToUserset.Tupleset tupleset = 1;


    pub fn get_tupleset(&self) -> &TupleToUserset_Tupleset {
        self.tupleset.as_ref().unwrap_or_else(|| <TupleToUserset_Tupleset as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tupleset(&mut self) {
        self.tupleset.clear();
    }

    pub fn has_tupleset(&self) -> bool {
        self.tupleset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tupleset(&mut self, v: TupleToUserset_Tupleset) {
        self.tupleset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tupleset(&mut self) -> &mut TupleToUserset_Tupleset {
        if self.tupleset.is_none() {
            self.tupleset.set_default();
        }
        self.tupleset.as_mut().unwrap()
    }

    // Take field
    pub fn take_tupleset(&mut self) -> TupleToUserset_Tupleset {
        self.tupleset.take().unwrap_or_else(|| TupleToUserset_Tupleset::new())
    }

    // .ComputedUserset computed_userset = 2;


    pub fn get_computed_userset(&self) -> &ComputedUserset {
        self.computed_userset.as_ref().unwrap_or_else(|| <ComputedUserset as ::protobuf::Message>::default_instance())
    }
    pub fn clear_computed_userset(&mut self) {
        self.computed_userset.clear();
    }

    pub fn has_computed_userset(&self) -> bool {
        self.computed_userset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_computed_userset(&mut self, v: ComputedUserset) {
        self.computed_userset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_computed_userset(&mut self) -> &mut ComputedUserset {
        if self.computed_userset.is_none() {
            self.computed_userset.set_default();
        }
        self.computed_userset.as_mut().unwrap()
    }

    // Take field
    pub fn take_computed_userset(&mut self) -> ComputedUserset {
        self.computed_userset.take().unwrap_or_else(|| ComputedUserset::new())
    }
}

impl ::protobuf::Message for TupleToUserset {
    fn is_initialized(&self) -> bool {
        for v in &self.tupleset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.computed_userset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tupleset)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.computed_userset)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tupleset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.computed_userset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tupleset.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.computed_userset.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TupleToUserset {
        TupleToUserset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TupleToUserset_Tupleset>>(
                "tupleset",
                |m: &TupleToUserset| { &m.tupleset },
                |m: &mut TupleToUserset| { &mut m.tupleset },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ComputedUserset>>(
                "computed_userset",
                |m: &TupleToUserset| { &m.computed_userset },
                |m: &mut TupleToUserset| { &mut m.computed_userset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TupleToUserset>(
                "TupleToUserset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TupleToUserset {
        static instance: ::protobuf::rt::LazyV2<TupleToUserset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TupleToUserset::new)
    }
}

impl ::protobuf::Clear for TupleToUserset {
    fn clear(&mut self) {
        self.tupleset.clear();
        self.computed_userset.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TupleToUserset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TupleToUserset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TupleToUserset_Tupleset {
    // message fields
    pub relation: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TupleToUserset_Tupleset {
    fn default() -> &'a TupleToUserset_Tupleset {
        <TupleToUserset_Tupleset as ::protobuf::Message>::default_instance()
    }
}

impl TupleToUserset_Tupleset {
    pub fn new() -> TupleToUserset_Tupleset {
        ::std::default::Default::default()
    }

    // string relation = 1;


    pub fn get_relation(&self) -> &str {
        &self.relation
    }
    pub fn clear_relation(&mut self) {
        self.relation.clear();
    }

    // Param is passed by value, moved
    pub fn set_relation(&mut self, v: ::std::string::String) {
        self.relation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relation(&mut self) -> &mut ::std::string::String {
        &mut self.relation
    }

    // Take field
    pub fn take_relation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relation, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TupleToUserset_Tupleset {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relation.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.relation.is_empty() {
            os.write_string(1, &self.relation)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TupleToUserset_Tupleset {
        TupleToUserset_Tupleset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "relation",
                |m: &TupleToUserset_Tupleset| { &m.relation },
                |m: &mut TupleToUserset_Tupleset| { &mut m.relation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TupleToUserset_Tupleset>(
                "TupleToUserset.Tupleset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TupleToUserset_Tupleset {
        static instance: ::protobuf::rt::LazyV2<TupleToUserset_Tupleset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TupleToUserset_Tupleset::new)
    }
}

impl ::protobuf::Clear for TupleToUserset_Tupleset {
    fn clear(&mut self) {
        self.relation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TupleToUserset_Tupleset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TupleToUserset_Tupleset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ComputedUserset {
    // message fields
    pub object: ComputedUserset_Object,
    pub relation: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ComputedUserset {
    fn default() -> &'a ComputedUserset {
        <ComputedUserset as ::protobuf::Message>::default_instance()
    }
}

impl ComputedUserset {
    pub fn new() -> ComputedUserset {
        ::std::default::Default::default()
    }

    // .ComputedUserset.Object object = 1;


    pub fn get_object(&self) -> ComputedUserset_Object {
        self.object
    }
    pub fn clear_object(&mut self) {
        self.object = ComputedUserset_Object::TUPLE_OBJECT;
    }

    // Param is passed by value, moved
    pub fn set_object(&mut self, v: ComputedUserset_Object) {
        self.object = v;
    }

    // string relation = 2;


    pub fn get_relation(&self) -> &str {
        &self.relation
    }
    pub fn clear_relation(&mut self) {
        self.relation.clear();
    }

    // Param is passed by value, moved
    pub fn set_relation(&mut self, v: ::std::string::String) {
        self.relation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relation(&mut self) -> &mut ::std::string::String {
        &mut self.relation
    }

    // Take field
    pub fn take_relation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relation, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ComputedUserset {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.object, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.object != ComputedUserset_Object::TUPLE_OBJECT {
            my_size += ::protobuf::rt::enum_size(1, self.object);
        }
        if !self.relation.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.relation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.object != ComputedUserset_Object::TUPLE_OBJECT {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.object))?;
        }
        if !self.relation.is_empty() {
            os.write_string(2, &self.relation)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ComputedUserset {
        ComputedUserset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ComputedUserset_Object>>(
                "object",
                |m: &ComputedUserset| { &m.object },
                |m: &mut ComputedUserset| { &mut m.object },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "relation",
                |m: &ComputedUserset| { &m.relation },
                |m: &mut ComputedUserset| { &mut m.relation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ComputedUserset>(
                "ComputedUserset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ComputedUserset {
        static instance: ::protobuf::rt::LazyV2<ComputedUserset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ComputedUserset::new)
    }
}

impl ::protobuf::Clear for ComputedUserset {
    fn clear(&mut self) {
        self.object = ComputedUserset_Object::TUPLE_OBJECT;
        self.relation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ComputedUserset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComputedUserset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ComputedUserset_Object {
    TUPLE_OBJECT = 0,
    TUPLE_USERSET_OBJECT = 1,
}

impl ::protobuf::ProtobufEnum for ComputedUserset_Object {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ComputedUserset_Object> {
        match value {
            0 => ::std::option::Option::Some(ComputedUserset_Object::TUPLE_OBJECT),
            1 => ::std::option::Option::Some(ComputedUserset_Object::TUPLE_USERSET_OBJECT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ComputedUserset_Object] = &[
            ComputedUserset_Object::TUPLE_OBJECT,
            ComputedUserset_Object::TUPLE_USERSET_OBJECT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ComputedUserset_Object>("ComputedUserset.Object", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ComputedUserset_Object {
}

impl ::std::default::Default for ComputedUserset_Object {
    fn default() -> Self {
        ComputedUserset_Object::TUPLE_OBJECT
    }
}

impl ::protobuf::reflect::ProtobufValue for ComputedUserset_Object {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1earrakisapi/api/namespace.proto\"P\n\x13NamespaceDefinition\x12\x12\
    \n\x04name\x18\x01\x20\x01(\tR\x04name\x12%\n\x08relation\x18\x02\x20\
    \x03(\x0b2\t.RelationR\x08relation\"X\n\x08Relation\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x128\n\x0fuserset_rewrite\x18\x02\x20\x01(\
    \x0b2\x0f.UsersetRewriteR\x0eusersetRewrite\"\xb0\x01\n\x0eUsersetRewrit\
    e\x12%\n\x05union\x18\x01\x20\x01(\x0b2\r.SetOperationH\0R\x05union\x123\
    \n\x0cintersection\x18\x02\x20\x01(\x0b2\r.SetOperationH\0R\x0cintersect\
    ion\x12-\n\texclusion\x18\x03\x20\x01(\x0b2\r.SetOperationH\0R\texclusio\
    nB\x13\n\x11rewrite_operation\"\xc2\x02\n\x0cSetOperation\x12)\n\x05chil\
    d\x18\x01\x20\x03(\x0b2\x13.SetOperation.ChildR\x05child\x1a\x86\x02\n\
    \x05Child\x12/\n\x05_this\x18\x01\x20\x01(\x0b2\x18.SetOperation.Child.T\
    hisH\0R\x04This\x12=\n\x10computed_userset\x18\x02\x20\x01(\x0b2\x10.Com\
    putedUsersetH\0R\x0fcomputedUserset\x12;\n\x10tuple_to_userset\x18\x03\
    \x20\x01(\x0b2\x0f.TupleToUsersetH\0R\x0etupleToUserset\x12:\n\x0fuserse\
    t_rewrite\x18\x04\x20\x01(\x0b2\x0f.UsersetRewriteH\0R\x0eusersetRewrite\
    \x1a\x06\n\x04ThisB\x0c\n\nchild_type\"\xab\x01\n\x0eTupleToUserset\x124\
    \n\x08tupleset\x18\x01\x20\x01(\x0b2\x18.TupleToUserset.TuplesetR\x08tup\
    leset\x12;\n\x10computed_userset\x18\x02\x20\x01(\x0b2\x10.ComputedUsers\
    etR\x0fcomputedUserset\x1a&\n\x08Tupleset\x12\x1a\n\x08relation\x18\x01\
    \x20\x01(\tR\x08relation\"\x94\x01\n\x0fComputedUserset\x12/\n\x06object\
    \x18\x01\x20\x01(\x0e2\x17.ComputedUserset.ObjectR\x06object\x12\x1a\n\
    \x08relation\x18\x02\x20\x01(\tR\x08relation\"4\n\x06Object\x12\x10\n\
    \x0cTUPLE_OBJECT\x10\0\x12\x18\n\x14TUPLE_USERSET_OBJECT\x10\x01B&Z$gith\
    ub.com/petricorp/code/arrakisapiJ\xad\x0b\n\x06\x12\x04\0\02\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0;\n\t\n\x02\x08\
    \x0b\x12\x03\x02\0;\n\n\n\x02\x04\0\x12\x04\x04\0\x08\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x04\x08\x1b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x02\x12\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x05\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x10\x11\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x02!\n\x0c\n\x05\x04\0\x02\x01\x04\
    \x12\x03\x07\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x07\x0b\x13\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\x14\x1c\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x07\x1f\x20\n\n\n\x02\x04\x01\x12\x04\n\0\r\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\n\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0b\
    \x02\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x0b\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x0b\x10\x11\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0c\x02%\n\x0c\n\x05\
    \x04\x01\x02\x01\x06\x12\x03\x0c\x02\x10\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x0c\x11\x20\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0c#$\n\n\n\
    \x02\x04\x02\x12\x04\x0f\0\x15\x01\n\n\n\x03\x04\x02\x01\x12\x03\x0f\x08\
    \x16\n\x0c\n\x04\x04\x02\x08\0\x12\x04\x10\x02\x14\x03\n\x0c\n\x05\x04\
    \x02\x08\0\x01\x12\x03\x10\x08\x19\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x11\
    \x04\x1b\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x11\x04\x10\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x11\x11\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x11\x19\x1a\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x12\x04\"\n\x0c\n\
    \x05\x04\x02\x02\x01\x06\x12\x03\x12\x04\x10\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x12\x11\x1d\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x12\x20\
    !\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x13\x04\x1f\n\x0c\n\x05\x04\x02\
    \x02\x02\x06\x12\x03\x13\x04\x10\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\
    \x13\x11\x1a\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x13\x1d\x1e\n\n\n\
    \x02\x04\x03\x12\x04\x17\0$\x01\n\n\n\x03\x04\x03\x01\x12\x03\x17\x08\
    \x14\n\x0c\n\x04\x04\x03\x03\0\x12\x04\x18\x02!\x03\n\x0c\n\x05\x04\x03\
    \x03\0\x01\x12\x03\x18\n\x0f\n\r\n\x06\x04\x03\x03\0\x03\0\x12\x03\x19\
    \x04\x13\n\x0e\n\x07\x04\x03\x03\0\x03\0\x01\x12\x03\x19\x0c\x10\n\x0e\n\
    \x06\x04\x03\x03\0\x08\0\x12\x04\x1b\x04\x20\x05\n\x0e\n\x07\x04\x03\x03\
    \0\x08\0\x01\x12\x03\x1b\n\x14\n\r\n\x06\x04\x03\x03\0\x02\0\x12\x03\x1c\
    \x06\x15\n\x0e\n\x07\x04\x03\x03\0\x02\0\x06\x12\x03\x1c\x06\n\n\x0e\n\
    \x07\x04\x03\x03\0\x02\0\x01\x12\x03\x1c\x0b\x10\n\x0e\n\x07\x04\x03\x03\
    \0\x02\0\x03\x12\x03\x1c\x13\x14\n\r\n\x06\x04\x03\x03\0\x02\x01\x12\x03\
    \x1d\x06+\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x06\x12\x03\x1d\x06\x15\n\
    \x0e\n\x07\x04\x03\x03\0\x02\x01\x01\x12\x03\x1d\x16&\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x01\x03\x12\x03\x1d)*\n\r\n\x06\x04\x03\x03\0\x02\x02\x12\
    \x03\x1e\x06*\n\x0e\n\x07\x04\x03\x03\0\x02\x02\x06\x12\x03\x1e\x06\x14\
    \n\x0e\n\x07\x04\x03\x03\0\x02\x02\x01\x12\x03\x1e\x15%\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x02\x03\x12\x03\x1e()\n\r\n\x06\x04\x03\x03\0\x02\x03\x12\
    \x03\x1f\x06)\n\x0e\n\x07\x04\x03\x03\0\x02\x03\x06\x12\x03\x1f\x06\x14\
    \n\x0e\n\x07\x04\x03\x03\0\x02\x03\x01\x12\x03\x1f\x15$\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x03\x03\x12\x03\x1f'(\n\x0b\n\x04\x04\x03\x02\0\x12\x03#\
    \x02\x1b\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03#\x02\n\n\x0c\n\x05\x04\
    \x03\x02\0\x06\x12\x03#\x0b\x10\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03#\
    \x11\x16\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03#\x19\x1a\n\n\n\x02\x04\
    \x04\x12\x04&\0+\x01\n\n\n\x03\x04\x04\x01\x12\x03&\x08\x16\n\x0b\n\x04\
    \x04\x04\x03\0\x12\x03'\x02+\n\x0c\n\x05\x04\x04\x03\0\x01\x12\x03'\n\
    \x12\n\r\n\x06\x04\x04\x03\0\x02\0\x12\x03'\x15)\n\x0e\n\x07\x04\x04\x03\
    \0\x02\0\x05\x12\x03'\x15\x1b\n\x0e\n\x07\x04\x04\x03\0\x02\0\x01\x12\
    \x03'\x1c$\n\x0e\n\x07\x04\x04\x03\0\x02\0\x03\x12\x03''(\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03)\x02\x18\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03)\
    \x02\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03)\x0b\x13\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03)\x16\x17\n\x0b\n\x04\x04\x04\x02\x01\x12\x03*\x02\
    '\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03*\x02\x11\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x03*\x12\"\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03*%&\n\
    \n\n\x02\x04\x05\x12\x04-\02\x01\n\n\n\x03\x04\x05\x01\x12\x03-\x08\x17\
    \n\x0b\n\x04\x04\x05\x04\0\x12\x03.\x02=\n\x0c\n\x05\x04\x05\x04\0\x01\
    \x12\x03.\x07\r\n\r\n\x06\x04\x05\x04\0\x02\0\x12\x03.\x10!\n\x0e\n\x07\
    \x04\x05\x04\0\x02\0\x01\x12\x03.\x10\x1c\n\x0e\n\x07\x04\x05\x04\0\x02\
    \0\x02\x12\x03.\x1f\x20\n\r\n\x06\x04\x05\x04\0\x02\x01\x12\x03.\";\n\
    \x0e\n\x07\x04\x05\x04\0\x02\x01\x01\x12\x03.\"6\n\x0e\n\x07\x04\x05\x04\
    \0\x02\x01\x02\x12\x03.9:\n\x0b\n\x04\x04\x05\x02\0\x12\x030\x02\x14\n\
    \x0c\n\x05\x04\x05\x02\0\x06\x12\x030\x02\x08\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x030\t\x0f\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x030\x12\x13\n\x0b\
    \n\x04\x04\x05\x02\x01\x12\x031\x02\x16\n\x0c\n\x05\x04\x05\x02\x01\x05\
    \x12\x031\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x031\t\x11\n\x0c\n\
    \x05\x04\x05\x02\x01\x03\x12\x031\x14\x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
