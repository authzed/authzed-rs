// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `arrakisapi/api/acl_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct RelationTupleFilter {
    // message fields
    pub namespace: ::std::string::String,
    pub object_id: ::std::string::String,
    pub relation: ::std::string::String,
    pub user_id: ::std::string::String,
    pub userset: ::protobuf::SingularPtrField<super::core::ObjectAndRelation>,
    pub filters: ::std::vec::Vec<RelationTupleFilter_Filter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelationTupleFilter {
    fn default() -> &'a RelationTupleFilter {
        <RelationTupleFilter as ::protobuf::Message>::default_instance()
    }
}

impl RelationTupleFilter {
    pub fn new() -> RelationTupleFilter {
        ::std::default::Default::default()
    }

    // string namespace = 1;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // string object_id = 2;


    pub fn get_object_id(&self) -> &str {
        &self.object_id
    }
    pub fn clear_object_id(&mut self) {
        self.object_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_object_id(&mut self, v: ::std::string::String) {
        self.object_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object_id(&mut self) -> &mut ::std::string::String {
        &mut self.object_id
    }

    // Take field
    pub fn take_object_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.object_id, ::std::string::String::new())
    }

    // string relation = 3;


    pub fn get_relation(&self) -> &str {
        &self.relation
    }
    pub fn clear_relation(&mut self) {
        self.relation.clear();
    }

    // Param is passed by value, moved
    pub fn set_relation(&mut self, v: ::std::string::String) {
        self.relation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relation(&mut self) -> &mut ::std::string::String {
        &mut self.relation
    }

    // Take field
    pub fn take_relation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relation, ::std::string::String::new())
    }

    // string user_id = 4;


    pub fn get_user_id(&self) -> &str {
        &self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: ::std::string::String) {
        self.user_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_id(&mut self) -> &mut ::std::string::String {
        &mut self.user_id
    }

    // Take field
    pub fn take_user_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_id, ::std::string::String::new())
    }

    // .ObjectAndRelation userset = 5;


    pub fn get_userset(&self) -> &super::core::ObjectAndRelation {
        self.userset.as_ref().unwrap_or_else(|| <super::core::ObjectAndRelation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_userset(&mut self) {
        self.userset.clear();
    }

    pub fn has_userset(&self) -> bool {
        self.userset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_userset(&mut self, v: super::core::ObjectAndRelation) {
        self.userset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_userset(&mut self) -> &mut super::core::ObjectAndRelation {
        if self.userset.is_none() {
            self.userset.set_default();
        }
        self.userset.as_mut().unwrap()
    }

    // Take field
    pub fn take_userset(&mut self) -> super::core::ObjectAndRelation {
        self.userset.take().unwrap_or_else(|| super::core::ObjectAndRelation::new())
    }

    // repeated .RelationTupleFilter.Filter filters = 6;


    pub fn get_filters(&self) -> &[RelationTupleFilter_Filter] {
        &self.filters
    }
    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::std::vec::Vec<RelationTupleFilter_Filter>) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filters(&mut self) -> &mut ::std::vec::Vec<RelationTupleFilter_Filter> {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::std::vec::Vec<RelationTupleFilter_Filter> {
        ::std::mem::replace(&mut self.filters, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RelationTupleFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.userset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.object_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relation)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.userset)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.filters, 6, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.namespace);
        }
        if !self.object_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.object_id);
        }
        if !self.relation.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.relation);
        }
        if !self.user_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.user_id);
        }
        if let Some(ref v) = self.userset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.filters {
            my_size += ::protobuf::rt::enum_size(6, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.namespace.is_empty() {
            os.write_string(1, &self.namespace)?;
        }
        if !self.object_id.is_empty() {
            os.write_string(2, &self.object_id)?;
        }
        if !self.relation.is_empty() {
            os.write_string(3, &self.relation)?;
        }
        if !self.user_id.is_empty() {
            os.write_string(4, &self.user_id)?;
        }
        if let Some(ref v) = self.userset.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.filters {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelationTupleFilter {
        RelationTupleFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &RelationTupleFilter| { &m.namespace },
                |m: &mut RelationTupleFilter| { &mut m.namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "object_id",
                |m: &RelationTupleFilter| { &m.object_id },
                |m: &mut RelationTupleFilter| { &mut m.object_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "relation",
                |m: &RelationTupleFilter| { &m.relation },
                |m: &mut RelationTupleFilter| { &mut m.relation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_id",
                |m: &RelationTupleFilter| { &m.user_id },
                |m: &mut RelationTupleFilter| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::ObjectAndRelation>>(
                "userset",
                |m: &RelationTupleFilter| { &m.userset },
                |m: &mut RelationTupleFilter| { &mut m.userset },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RelationTupleFilter_Filter>>(
                "filters",
                |m: &RelationTupleFilter| { &m.filters },
                |m: &mut RelationTupleFilter| { &mut m.filters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelationTupleFilter>(
                "RelationTupleFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelationTupleFilter {
        static instance: ::protobuf::rt::LazyV2<RelationTupleFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelationTupleFilter::new)
    }
}

impl ::protobuf::Clear for RelationTupleFilter {
    fn clear(&mut self) {
        self.namespace.clear();
        self.object_id.clear();
        self.relation.clear();
        self.user_id.clear();
        self.userset.clear();
        self.filters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelationTupleFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationTupleFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RelationTupleFilter_Filter {
    UNKNOWN = 0,
    OBJECT_ID = 1,
    RELATION = 2,
    USER_ID = 3,
    USERSET = 4,
}

impl ::protobuf::ProtobufEnum for RelationTupleFilter_Filter {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RelationTupleFilter_Filter> {
        match value {
            0 => ::std::option::Option::Some(RelationTupleFilter_Filter::UNKNOWN),
            1 => ::std::option::Option::Some(RelationTupleFilter_Filter::OBJECT_ID),
            2 => ::std::option::Option::Some(RelationTupleFilter_Filter::RELATION),
            3 => ::std::option::Option::Some(RelationTupleFilter_Filter::USER_ID),
            4 => ::std::option::Option::Some(RelationTupleFilter_Filter::USERSET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RelationTupleFilter_Filter] = &[
            RelationTupleFilter_Filter::UNKNOWN,
            RelationTupleFilter_Filter::OBJECT_ID,
            RelationTupleFilter_Filter::RELATION,
            RelationTupleFilter_Filter::USER_ID,
            RelationTupleFilter_Filter::USERSET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RelationTupleFilter_Filter>("RelationTupleFilter.Filter", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RelationTupleFilter_Filter {
}

impl ::std::default::Default for RelationTupleFilter_Filter {
    fn default() -> Self {
        RelationTupleFilter_Filter::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationTupleFilter_Filter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRequest {
    // message fields
    pub tuplesets: ::protobuf::RepeatedField<RelationTupleFilter>,
    pub at_revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    // repeated .RelationTupleFilter tuplesets = 1;


    pub fn get_tuplesets(&self) -> &[RelationTupleFilter] {
        &self.tuplesets
    }
    pub fn clear_tuplesets(&mut self) {
        self.tuplesets.clear();
    }

    // Param is passed by value, moved
    pub fn set_tuplesets(&mut self, v: ::protobuf::RepeatedField<RelationTupleFilter>) {
        self.tuplesets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tuplesets(&mut self) -> &mut ::protobuf::RepeatedField<RelationTupleFilter> {
        &mut self.tuplesets
    }

    // Take field
    pub fn take_tuplesets(&mut self) -> ::protobuf::RepeatedField<RelationTupleFilter> {
        ::std::mem::replace(&mut self.tuplesets, ::protobuf::RepeatedField::new())
    }

    // .Zookie at_revision = 2;


    pub fn get_at_revision(&self) -> &super::core::Zookie {
        self.at_revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_at_revision(&mut self) {
        self.at_revision.clear();
    }

    pub fn has_at_revision(&self) -> bool {
        self.at_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_at_revision(&mut self, v: super::core::Zookie) {
        self.at_revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_at_revision(&mut self) -> &mut super::core::Zookie {
        if self.at_revision.is_none() {
            self.at_revision.set_default();
        }
        self.at_revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_at_revision(&mut self) -> super::core::Zookie {
        self.at_revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for ReadRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.tuplesets {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.at_revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tuplesets)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.at_revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tuplesets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.at_revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tuplesets {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.at_revision.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelationTupleFilter>>(
                "tuplesets",
                |m: &ReadRequest| { &m.tuplesets },
                |m: &mut ReadRequest| { &mut m.tuplesets },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "at_revision",
                |m: &ReadRequest| { &m.at_revision },
                |m: &mut ReadRequest| { &mut m.at_revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadRequest>(
                "ReadRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadRequest {
        static instance: ::protobuf::rt::LazyV2<ReadRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadRequest::new)
    }
}

impl ::protobuf::Clear for ReadRequest {
    fn clear(&mut self) {
        self.tuplesets.clear();
        self.at_revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadResponse {
    // message fields
    pub tuplesets: ::protobuf::RepeatedField<ReadResponse_Tupleset>,
    pub revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadResponse {
    fn default() -> &'a ReadResponse {
        <ReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    // repeated .ReadResponse.Tupleset tuplesets = 1;


    pub fn get_tuplesets(&self) -> &[ReadResponse_Tupleset] {
        &self.tuplesets
    }
    pub fn clear_tuplesets(&mut self) {
        self.tuplesets.clear();
    }

    // Param is passed by value, moved
    pub fn set_tuplesets(&mut self, v: ::protobuf::RepeatedField<ReadResponse_Tupleset>) {
        self.tuplesets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tuplesets(&mut self) -> &mut ::protobuf::RepeatedField<ReadResponse_Tupleset> {
        &mut self.tuplesets
    }

    // Take field
    pub fn take_tuplesets(&mut self) -> ::protobuf::RepeatedField<ReadResponse_Tupleset> {
        ::std::mem::replace(&mut self.tuplesets, ::protobuf::RepeatedField::new())
    }

    // .Zookie revision = 2;


    pub fn get_revision(&self) -> &super::core::Zookie {
        self.revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_revision(&mut self) {
        self.revision.clear();
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: super::core::Zookie) {
        self.revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revision(&mut self) -> &mut super::core::Zookie {
        if self.revision.is_none() {
            self.revision.set_default();
        }
        self.revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_revision(&mut self) -> super::core::Zookie {
        self.revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for ReadResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tuplesets {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tuplesets)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tuplesets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tuplesets {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.revision.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadResponse_Tupleset>>(
                "tuplesets",
                |m: &ReadResponse| { &m.tuplesets },
                |m: &mut ReadResponse| { &mut m.tuplesets },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "revision",
                |m: &ReadResponse| { &m.revision },
                |m: &mut ReadResponse| { &mut m.revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadResponse>(
                "ReadResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadResponse {
        static instance: ::protobuf::rt::LazyV2<ReadResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadResponse::new)
    }
}

impl ::protobuf::Clear for ReadResponse {
    fn clear(&mut self) {
        self.tuplesets.clear();
        self.revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadResponse_Tupleset {
    // message fields
    pub tuples: ::protobuf::RepeatedField<super::core::RelationTuple>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadResponse_Tupleset {
    fn default() -> &'a ReadResponse_Tupleset {
        <ReadResponse_Tupleset as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse_Tupleset {
    pub fn new() -> ReadResponse_Tupleset {
        ::std::default::Default::default()
    }

    // repeated .RelationTuple tuples = 1;


    pub fn get_tuples(&self) -> &[super::core::RelationTuple] {
        &self.tuples
    }
    pub fn clear_tuples(&mut self) {
        self.tuples.clear();
    }

    // Param is passed by value, moved
    pub fn set_tuples(&mut self, v: ::protobuf::RepeatedField<super::core::RelationTuple>) {
        self.tuples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tuples(&mut self) -> &mut ::protobuf::RepeatedField<super::core::RelationTuple> {
        &mut self.tuples
    }

    // Take field
    pub fn take_tuples(&mut self) -> ::protobuf::RepeatedField<super::core::RelationTuple> {
        ::std::mem::replace(&mut self.tuples, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReadResponse_Tupleset {
    fn is_initialized(&self) -> bool {
        for v in &self.tuples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tuples)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tuples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tuples {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadResponse_Tupleset {
        ReadResponse_Tupleset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::RelationTuple>>(
                "tuples",
                |m: &ReadResponse_Tupleset| { &m.tuples },
                |m: &mut ReadResponse_Tupleset| { &mut m.tuples },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadResponse_Tupleset>(
                "ReadResponse.Tupleset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadResponse_Tupleset {
        static instance: ::protobuf::rt::LazyV2<ReadResponse_Tupleset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadResponse_Tupleset::new)
    }
}

impl ::protobuf::Clear for ReadResponse_Tupleset {
    fn clear(&mut self) {
        self.tuples.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadResponse_Tupleset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse_Tupleset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteRequest {
    // message fields
    pub write_conditions: ::protobuf::RepeatedField<super::core::RelationTuple>,
    pub updates: ::protobuf::RepeatedField<super::core::RelationTupleUpdate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteRequest {
    fn default() -> &'a WriteRequest {
        <WriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteRequest {
    pub fn new() -> WriteRequest {
        ::std::default::Default::default()
    }

    // repeated .RelationTuple write_conditions = 1;


    pub fn get_write_conditions(&self) -> &[super::core::RelationTuple] {
        &self.write_conditions
    }
    pub fn clear_write_conditions(&mut self) {
        self.write_conditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_write_conditions(&mut self, v: ::protobuf::RepeatedField<super::core::RelationTuple>) {
        self.write_conditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_write_conditions(&mut self) -> &mut ::protobuf::RepeatedField<super::core::RelationTuple> {
        &mut self.write_conditions
    }

    // Take field
    pub fn take_write_conditions(&mut self) -> ::protobuf::RepeatedField<super::core::RelationTuple> {
        ::std::mem::replace(&mut self.write_conditions, ::protobuf::RepeatedField::new())
    }

    // repeated .RelationTupleUpdate updates = 2;


    pub fn get_updates(&self) -> &[super::core::RelationTupleUpdate] {
        &self.updates
    }
    pub fn clear_updates(&mut self) {
        self.updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_updates(&mut self, v: ::protobuf::RepeatedField<super::core::RelationTupleUpdate>) {
        self.updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updates(&mut self) -> &mut ::protobuf::RepeatedField<super::core::RelationTupleUpdate> {
        &mut self.updates
    }

    // Take field
    pub fn take_updates(&mut self) -> ::protobuf::RepeatedField<super::core::RelationTupleUpdate> {
        ::std::mem::replace(&mut self.updates, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WriteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.write_conditions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.write_conditions)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updates)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.write_conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.write_conditions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.updates {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteRequest {
        WriteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::RelationTuple>>(
                "write_conditions",
                |m: &WriteRequest| { &m.write_conditions },
                |m: &mut WriteRequest| { &mut m.write_conditions },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::RelationTupleUpdate>>(
                "updates",
                |m: &WriteRequest| { &m.updates },
                |m: &mut WriteRequest| { &mut m.updates },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteRequest>(
                "WriteRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteRequest {
        static instance: ::protobuf::rt::LazyV2<WriteRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteRequest::new)
    }
}

impl ::protobuf::Clear for WriteRequest {
    fn clear(&mut self) {
        self.write_conditions.clear();
        self.updates.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteResponse {
    // message fields
    pub revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteResponse {
    fn default() -> &'a WriteResponse {
        <WriteResponse as ::protobuf::Message>::default_instance()
    }
}

impl WriteResponse {
    pub fn new() -> WriteResponse {
        ::std::default::Default::default()
    }

    // .Zookie revision = 1;


    pub fn get_revision(&self) -> &super::core::Zookie {
        self.revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_revision(&mut self) {
        self.revision.clear();
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: super::core::Zookie) {
        self.revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revision(&mut self) -> &mut super::core::Zookie {
        if self.revision.is_none() {
            self.revision.set_default();
        }
        self.revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_revision(&mut self) -> super::core::Zookie {
        self.revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for WriteResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.revision.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteResponse {
        WriteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "revision",
                |m: &WriteResponse| { &m.revision },
                |m: &mut WriteResponse| { &mut m.revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteResponse>(
                "WriteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteResponse {
        static instance: ::protobuf::rt::LazyV2<WriteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteResponse::new)
    }
}

impl ::protobuf::Clear for WriteResponse {
    fn clear(&mut self) {
        self.revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckRequest {
    // message fields
    pub test_userset: ::protobuf::SingularPtrField<super::core::ObjectAndRelation>,
    pub user: ::protobuf::SingularPtrField<super::core::User>,
    pub at_revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckRequest {
    fn default() -> &'a CheckRequest {
        <CheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl CheckRequest {
    pub fn new() -> CheckRequest {
        ::std::default::Default::default()
    }

    // .ObjectAndRelation test_userset = 1;


    pub fn get_test_userset(&self) -> &super::core::ObjectAndRelation {
        self.test_userset.as_ref().unwrap_or_else(|| <super::core::ObjectAndRelation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_test_userset(&mut self) {
        self.test_userset.clear();
    }

    pub fn has_test_userset(&self) -> bool {
        self.test_userset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_test_userset(&mut self, v: super::core::ObjectAndRelation) {
        self.test_userset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_test_userset(&mut self) -> &mut super::core::ObjectAndRelation {
        if self.test_userset.is_none() {
            self.test_userset.set_default();
        }
        self.test_userset.as_mut().unwrap()
    }

    // Take field
    pub fn take_test_userset(&mut self) -> super::core::ObjectAndRelation {
        self.test_userset.take().unwrap_or_else(|| super::core::ObjectAndRelation::new())
    }

    // .User user = 2;


    pub fn get_user(&self) -> &super::core::User {
        self.user.as_ref().unwrap_or_else(|| <super::core::User as ::protobuf::Message>::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: super::core::User) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut super::core::User {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> super::core::User {
        self.user.take().unwrap_or_else(|| super::core::User::new())
    }

    // .Zookie at_revision = 3;


    pub fn get_at_revision(&self) -> &super::core::Zookie {
        self.at_revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_at_revision(&mut self) {
        self.at_revision.clear();
    }

    pub fn has_at_revision(&self) -> bool {
        self.at_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_at_revision(&mut self, v: super::core::Zookie) {
        self.at_revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_at_revision(&mut self) -> &mut super::core::Zookie {
        if self.at_revision.is_none() {
            self.at_revision.set_default();
        }
        self.at_revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_at_revision(&mut self) -> super::core::Zookie {
        self.at_revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for CheckRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.test_userset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.at_revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.test_userset)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.at_revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.test_userset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.at_revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.test_userset.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.at_revision.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckRequest {
        CheckRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::ObjectAndRelation>>(
                "test_userset",
                |m: &CheckRequest| { &m.test_userset },
                |m: &mut CheckRequest| { &mut m.test_userset },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::User>>(
                "user",
                |m: &CheckRequest| { &m.user },
                |m: &mut CheckRequest| { &mut m.user },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "at_revision",
                |m: &CheckRequest| { &m.at_revision },
                |m: &mut CheckRequest| { &mut m.at_revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckRequest>(
                "CheckRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckRequest {
        static instance: ::protobuf::rt::LazyV2<CheckRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckRequest::new)
    }
}

impl ::protobuf::Clear for CheckRequest {
    fn clear(&mut self) {
        self.test_userset.clear();
        self.user.clear();
        self.at_revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContentChangeCheckRequest {
    // message fields
    pub test_userset: ::protobuf::SingularPtrField<super::core::ObjectAndRelation>,
    pub user: ::protobuf::SingularPtrField<super::core::User>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContentChangeCheckRequest {
    fn default() -> &'a ContentChangeCheckRequest {
        <ContentChangeCheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl ContentChangeCheckRequest {
    pub fn new() -> ContentChangeCheckRequest {
        ::std::default::Default::default()
    }

    // .ObjectAndRelation test_userset = 1;


    pub fn get_test_userset(&self) -> &super::core::ObjectAndRelation {
        self.test_userset.as_ref().unwrap_or_else(|| <super::core::ObjectAndRelation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_test_userset(&mut self) {
        self.test_userset.clear();
    }

    pub fn has_test_userset(&self) -> bool {
        self.test_userset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_test_userset(&mut self, v: super::core::ObjectAndRelation) {
        self.test_userset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_test_userset(&mut self) -> &mut super::core::ObjectAndRelation {
        if self.test_userset.is_none() {
            self.test_userset.set_default();
        }
        self.test_userset.as_mut().unwrap()
    }

    // Take field
    pub fn take_test_userset(&mut self) -> super::core::ObjectAndRelation {
        self.test_userset.take().unwrap_or_else(|| super::core::ObjectAndRelation::new())
    }

    // .User user = 2;


    pub fn get_user(&self) -> &super::core::User {
        self.user.as_ref().unwrap_or_else(|| <super::core::User as ::protobuf::Message>::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: super::core::User) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut super::core::User {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> super::core::User {
        self.user.take().unwrap_or_else(|| super::core::User::new())
    }
}

impl ::protobuf::Message for ContentChangeCheckRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.test_userset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.test_userset)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.test_userset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.test_userset.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContentChangeCheckRequest {
        ContentChangeCheckRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::ObjectAndRelation>>(
                "test_userset",
                |m: &ContentChangeCheckRequest| { &m.test_userset },
                |m: &mut ContentChangeCheckRequest| { &mut m.test_userset },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::User>>(
                "user",
                |m: &ContentChangeCheckRequest| { &m.user },
                |m: &mut ContentChangeCheckRequest| { &mut m.user },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ContentChangeCheckRequest>(
                "ContentChangeCheckRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ContentChangeCheckRequest {
        static instance: ::protobuf::rt::LazyV2<ContentChangeCheckRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContentChangeCheckRequest::new)
    }
}

impl ::protobuf::Clear for ContentChangeCheckRequest {
    fn clear(&mut self) {
        self.test_userset.clear();
        self.user.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContentChangeCheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentChangeCheckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckResponse {
    // message fields
    pub is_member: bool,
    pub revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckResponse {
    fn default() -> &'a CheckResponse {
        <CheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl CheckResponse {
    pub fn new() -> CheckResponse {
        ::std::default::Default::default()
    }

    // bool is_member = 1;


    pub fn get_is_member(&self) -> bool {
        self.is_member
    }
    pub fn clear_is_member(&mut self) {
        self.is_member = false;
    }

    // Param is passed by value, moved
    pub fn set_is_member(&mut self, v: bool) {
        self.is_member = v;
    }

    // .Zookie revision = 2;


    pub fn get_revision(&self) -> &super::core::Zookie {
        self.revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_revision(&mut self) {
        self.revision.clear();
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: super::core::Zookie) {
        self.revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revision(&mut self) -> &mut super::core::Zookie {
        if self.revision.is_none() {
            self.revision.set_default();
        }
        self.revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_revision(&mut self) -> super::core::Zookie {
        self.revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for CheckResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_member = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_member != false {
            my_size += 2;
        }
        if let Some(ref v) = self.revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_member != false {
            os.write_bool(1, self.is_member)?;
        }
        if let Some(ref v) = self.revision.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckResponse {
        CheckResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_member",
                |m: &CheckResponse| { &m.is_member },
                |m: &mut CheckResponse| { &mut m.is_member },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "revision",
                |m: &CheckResponse| { &m.revision },
                |m: &mut CheckResponse| { &mut m.revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckResponse>(
                "CheckResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckResponse {
        static instance: ::protobuf::rt::LazyV2<CheckResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckResponse::new)
    }
}

impl ::protobuf::Clear for CheckResponse {
    fn clear(&mut self) {
        self.is_member = false;
        self.revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExpandRequest {
    // message fields
    pub userset: ::protobuf::SingularPtrField<super::core::ObjectAndRelation>,
    pub at_revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExpandRequest {
    fn default() -> &'a ExpandRequest {
        <ExpandRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExpandRequest {
    pub fn new() -> ExpandRequest {
        ::std::default::Default::default()
    }

    // .ObjectAndRelation userset = 1;


    pub fn get_userset(&self) -> &super::core::ObjectAndRelation {
        self.userset.as_ref().unwrap_or_else(|| <super::core::ObjectAndRelation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_userset(&mut self) {
        self.userset.clear();
    }

    pub fn has_userset(&self) -> bool {
        self.userset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_userset(&mut self, v: super::core::ObjectAndRelation) {
        self.userset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_userset(&mut self) -> &mut super::core::ObjectAndRelation {
        if self.userset.is_none() {
            self.userset.set_default();
        }
        self.userset.as_mut().unwrap()
    }

    // Take field
    pub fn take_userset(&mut self) -> super::core::ObjectAndRelation {
        self.userset.take().unwrap_or_else(|| super::core::ObjectAndRelation::new())
    }

    // .Zookie at_revision = 2;


    pub fn get_at_revision(&self) -> &super::core::Zookie {
        self.at_revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_at_revision(&mut self) {
        self.at_revision.clear();
    }

    pub fn has_at_revision(&self) -> bool {
        self.at_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_at_revision(&mut self, v: super::core::Zookie) {
        self.at_revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_at_revision(&mut self) -> &mut super::core::Zookie {
        if self.at_revision.is_none() {
            self.at_revision.set_default();
        }
        self.at_revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_at_revision(&mut self) -> super::core::Zookie {
        self.at_revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for ExpandRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.userset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.at_revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.userset)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.at_revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.userset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.at_revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.userset.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.at_revision.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExpandRequest {
        ExpandRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::ObjectAndRelation>>(
                "userset",
                |m: &ExpandRequest| { &m.userset },
                |m: &mut ExpandRequest| { &mut m.userset },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "at_revision",
                |m: &ExpandRequest| { &m.at_revision },
                |m: &mut ExpandRequest| { &mut m.at_revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExpandRequest>(
                "ExpandRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExpandRequest {
        static instance: ::protobuf::rt::LazyV2<ExpandRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExpandRequest::new)
    }
}

impl ::protobuf::Clear for ExpandRequest {
    fn clear(&mut self) {
        self.userset.clear();
        self.at_revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExpandRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExpandRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExpandResponse {
    // message fields
    pub tree_node: ::protobuf::SingularPtrField<super::core::RelationTupleTreeNode>,
    pub revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExpandResponse {
    fn default() -> &'a ExpandResponse {
        <ExpandResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExpandResponse {
    pub fn new() -> ExpandResponse {
        ::std::default::Default::default()
    }

    // .RelationTupleTreeNode tree_node = 1;


    pub fn get_tree_node(&self) -> &super::core::RelationTupleTreeNode {
        self.tree_node.as_ref().unwrap_or_else(|| <super::core::RelationTupleTreeNode as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tree_node(&mut self) {
        self.tree_node.clear();
    }

    pub fn has_tree_node(&self) -> bool {
        self.tree_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tree_node(&mut self, v: super::core::RelationTupleTreeNode) {
        self.tree_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tree_node(&mut self) -> &mut super::core::RelationTupleTreeNode {
        if self.tree_node.is_none() {
            self.tree_node.set_default();
        }
        self.tree_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_tree_node(&mut self) -> super::core::RelationTupleTreeNode {
        self.tree_node.take().unwrap_or_else(|| super::core::RelationTupleTreeNode::new())
    }

    // .Zookie revision = 3;


    pub fn get_revision(&self) -> &super::core::Zookie {
        self.revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_revision(&mut self) {
        self.revision.clear();
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: super::core::Zookie) {
        self.revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revision(&mut self) -> &mut super::core::Zookie {
        if self.revision.is_none() {
            self.revision.set_default();
        }
        self.revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_revision(&mut self) -> super::core::Zookie {
        self.revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for ExpandResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tree_node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tree_node)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tree_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tree_node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.revision.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExpandResponse {
        ExpandResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::RelationTupleTreeNode>>(
                "tree_node",
                |m: &ExpandResponse| { &m.tree_node },
                |m: &mut ExpandResponse| { &mut m.tree_node },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "revision",
                |m: &ExpandResponse| { &m.revision },
                |m: &mut ExpandResponse| { &mut m.revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExpandResponse>(
                "ExpandResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExpandResponse {
        static instance: ::protobuf::rt::LazyV2<ExpandResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExpandResponse::new)
    }
}

impl ::protobuf::Clear for ExpandResponse {
    fn clear(&mut self) {
        self.tree_node.clear();
        self.revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExpandResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExpandResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20arrakisapi/api/acl_service.proto\x1a\x19arrakisapi/api/core.proto\
    \"\xb8\x02\n\x13RelationTupleFilter\x12\x1c\n\tnamespace\x18\x01\x20\x01\
    (\tR\tnamespace\x12\x1b\n\tobject_id\x18\x02\x20\x01(\tR\x08objectId\x12\
    \x1a\n\x08relation\x18\x03\x20\x01(\tR\x08relation\x12\x17\n\x07user_id\
    \x18\x04\x20\x01(\tR\x06userId\x12,\n\x07userset\x18\x05\x20\x01(\x0b2\
    \x12.ObjectAndRelationR\x07userset\x125\n\x07filters\x18\x06\x20\x03(\
    \x0e2\x1b.RelationTupleFilter.FilterR\x07filters\"L\n\x06Filter\x12\x0b\
    \n\x07UNKNOWN\x10\0\x12\r\n\tOBJECT_ID\x10\x01\x12\x0c\n\x08RELATION\x10\
    \x02\x12\x0b\n\x07USER_ID\x10\x03\x12\x0b\n\x07USERSET\x10\x04\"k\n\x0bR\
    eadRequest\x122\n\ttuplesets\x18\x01\x20\x03(\x0b2\x14.RelationTupleFilt\
    erR\ttuplesets\x12(\n\x0bat_revision\x18\x02\x20\x01(\x0b2\x07.ZookieR\n\
    atRevision\"\x9d\x01\n\x0cReadResponse\x124\n\ttuplesets\x18\x01\x20\x03\
    (\x0b2\x16.ReadResponse.TuplesetR\ttuplesets\x12#\n\x08revision\x18\x02\
    \x20\x01(\x0b2\x07.ZookieR\x08revision\x1a2\n\x08Tupleset\x12&\n\x06tupl\
    es\x18\x01\x20\x03(\x0b2\x0e.RelationTupleR\x06tuples\"y\n\x0cWriteReque\
    st\x129\n\x10write_conditions\x18\x01\x20\x03(\x0b2\x0e.RelationTupleR\
    \x0fwriteConditions\x12.\n\x07updates\x18\x02\x20\x03(\x0b2\x14.Relation\
    TupleUpdateR\x07updates\"4\n\rWriteResponse\x12#\n\x08revision\x18\x01\
    \x20\x01(\x0b2\x07.ZookieR\x08revision\"\x8a\x01\n\x0cCheckRequest\x125\
    \n\x0ctest_userset\x18\x01\x20\x01(\x0b2\x12.ObjectAndRelationR\x0btestU\
    serset\x12\x19\n\x04user\x18\x02\x20\x01(\x0b2\x05.UserR\x04user\x12(\n\
    \x0bat_revision\x18\x03\x20\x01(\x0b2\x07.ZookieR\natRevision\"m\n\x19Co\
    ntentChangeCheckRequest\x125\n\x0ctest_userset\x18\x01\x20\x01(\x0b2\x12\
    .ObjectAndRelationR\x0btestUserset\x12\x19\n\x04user\x18\x02\x20\x01(\
    \x0b2\x05.UserR\x04user\"Q\n\rCheckResponse\x12\x1b\n\tis_member\x18\x01\
    \x20\x01(\x08R\x08isMember\x12#\n\x08revision\x18\x02\x20\x01(\x0b2\x07.\
    ZookieR\x08revision\"g\n\rExpandRequest\x12,\n\x07userset\x18\x01\x20\
    \x01(\x0b2\x12.ObjectAndRelationR\x07userset\x12(\n\x0bat_revision\x18\
    \x02\x20\x01(\x0b2\x07.ZookieR\natRevision\"j\n\x0eExpandResponse\x123\n\
    \ttree_node\x18\x01\x20\x01(\x0b2\x16.RelationTupleTreeNodeR\x08treeNode\
    \x12#\n\x08revision\x18\x03\x20\x01(\x0b2\x07.ZookieR\x08revision2\xf8\
    \x01\n\nACLService\x12%\n\x04Read\x12\x0c.ReadRequest\x1a\r.ReadResponse\
    \"\0\x12(\n\x05Write\x12\r.WriteRequest\x1a\x0e.WriteResponse\"\0\x12(\n\
    \x05Check\x12\r.CheckRequest\x1a\x0e.CheckResponse\"\0\x12B\n\x12Content\
    ChangeCheck\x12\x1a.ContentChangeCheckRequest\x1a\x0e.CheckResponse\"\0\
    \x12+\n\x06Expand\x12\x0e.ExpandRequest\x1a\x0f.ExpandResponse\"\0B&Z$gi\
    thub.com/petricorp/code/arrakisapiJ\xd1!\n\x06\x12\x04\0\0k\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0;\n\t\n\x02\x08\
    \x0b\x12\x03\x02\0;\n\t\n\x02\x03\0\x12\x03\x04\0#\n\n\n\x02\x06\0\x12\
    \x04\x06\0\x10\x01\n\n\n\x03\x06\0\x01\x12\x03\x06\x08\x12\n\x0b\n\x04\
    \x06\0\x02\0\x12\x03\x07\x020\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\
    \x06\n\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\x0b\x16\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\x07\x20,\n\x0b\n\x04\x06\0\x02\x01\x12\x03\t\x023\n\
    \x0c\n\x05\x06\0\x02\x01\x01\x12\x03\t\x06\x0b\n\x0c\n\x05\x06\0\x02\x01\
    \x02\x12\x03\t\x0c\x18\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\t\"/\n\x0b\
    \n\x04\x06\0\x02\x02\x12\x03\x0b\x023\n\x0c\n\x05\x06\0\x02\x02\x01\x12\
    \x03\x0b\x06\x0b\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x0b\x0c\x18\n\x0c\
    \n\x05\x06\0\x02\x02\x03\x12\x03\x0b\"/\n\x0b\n\x04\x06\0\x02\x03\x12\
    \x03\r\x02M\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\r\x06\x18\n\x0c\n\x05\
    \x06\0\x02\x03\x02\x12\x03\r\x192\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\
    \r<I\n\x0b\n\x04\x06\0\x02\x04\x12\x03\x0f\x026\n\x0c\n\x05\x06\0\x02\
    \x04\x01\x12\x03\x0f\x06\x0c\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x0f\r\
    \x1a\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x0f$2\n\n\n\x02\x04\0\x12\x04\
    \x12\0\x20\x01\n\n\n\x03\x04\0\x01\x12\x03\x12\x08\x1b\n\x0c\n\x04\x04\0\
    \x04\0\x12\x04\x13\x02\x15\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x13\
    \x07\r\n\r\n\x06\x04\0\x04\0\x02\0\x12\x03\x14\x04\x10\n\x0e\n\x07\x04\0\
    \x04\0\x02\0\x01\x12\x03\x14\x04\x0b\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\
    \x12\x03\x14\x0e\x0f\n\r\n\x06\x04\0\x04\0\x02\x01\x12\x03\x14\x11\x1f\n\
    \x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\x14\x11\x1a\n\x0e\n\x07\x04\0\
    \x04\0\x02\x01\x02\x12\x03\x14\x1d\x1e\n\r\n\x06\x04\0\x04\0\x02\x02\x12\
    \x03\x14\x20-\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\x14\x20(\n\x0e\
    \n\x07\x04\0\x04\0\x02\x02\x02\x12\x03\x14+,\n\r\n\x06\x04\0\x04\0\x02\
    \x03\x12\x03\x14.:\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\x03\x14.5\n\
    \x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03\x1489\n\r\n\x06\x04\0\x04\0\
    \x02\x04\x12\x03\x14;G\n\x0e\n\x07\x04\0\x04\0\x02\x04\x01\x12\x03\x14;B\
    \n\x0e\n\x07\x04\0\x04\0\x02\x04\x02\x12\x03\x14EF\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03\x16\x02\x17\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x16\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x16\t\x12\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x16\x15\x16\nx\n\x04\x04\0\x02\x01\x12\x03\x1a\x02\x17\x1ak\x20\
    Setting\x20any\x20of\x20these\x20fields\x20requires\x20the\x20appropriat\
    e\x20filter\x20type\x20to\x20be\n\x20added\x20to\x20the\x20filters\x20li\
    st\x20as\x20well\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1a\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1a\t\x12\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x1a\x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x1b\x02\x16\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x1b\t\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1b\x14\
    \x15\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x1c\x02\x15\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1c\t\
    \x10\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1c\x13\x14\n\x0b\n\x04\x04\0\
    \x02\x04\x12\x03\x1d\x02\x20\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x1d\
    \x02\x13\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x1d\x14\x1b\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\x1d\x1e\x1f\n\x0b\n\x04\x04\0\x02\x05\x12\x03\
    \x1f\x02\x1e\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\x1f\x02\n\n\x0c\n\x05\
    \x04\0\x02\x05\x06\x12\x03\x1f\x0b\x11\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\x1f\x12\x19\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x1f\x1c\x1d\n\n\n\
    \x02\x04\x01\x12\x04\"\0&\x01\n\n\n\x03\x04\x01\x01\x12\x03\"\x08\x13\nY\
    \n\x04\x04\x01\x02\0\x12\x03$\x02-\x1aL\x20A\x20read\x20request\x20speci\
    fies\x20one\x20or\x20multiple\x20tuplesets\x20and\x20an\x20optional\x20z\
    ookie.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03$\x02\n\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03$\x0b\x1e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03$\
    \x1f(\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03$+,\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03%\x02\x19\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03%\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03%\t\x14\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03%\x17\x18\n\n\n\x02\x04\x02\x12\x04(\0-\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03(\x08\x14\n\x0b\n\x04\x04\x02\x03\0\x12\x03)\x029\n\
    \x0c\n\x05\x04\x02\x03\0\x01\x12\x03)\n\x12\n\r\n\x06\x04\x02\x03\0\x02\
    \0\x12\x03)\x157\n\x0e\n\x07\x04\x02\x03\0\x02\0\x04\x12\x03)\x15\x1d\n\
    \x0e\n\x07\x04\x02\x03\0\x02\0\x06\x12\x03)\x1e+\n\x0e\n\x07\x04\x02\x03\
    \0\x02\0\x01\x12\x03),2\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x03)56\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03+\x02\"\n\x0c\n\x05\x04\x02\x02\0\x04\
    \x12\x03+\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03+\x0b\x13\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03+\x14\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03+\x20!\n\x0b\n\x04\x04\x02\x02\x01\x12\x03,\x02\x16\n\x0c\n\x05\
    \x04\x02\x02\x01\x06\x12\x03,\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03,\t\x11\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03,\x14\x15\n\n\n\
    \x02\x04\x03\x12\x04/\0C\x01\n\n\n\x03\x04\x03\x01\x12\x03/\x08\x14\n\
    \xde\x06\n\x04\x04\x03\x02\0\x12\x03A\x02.\x1a\xae\x06\x20Clients\x20may\
    \x20modify\x20a\x20single\x20relation\x20tuple\x20to\x20add\x20or\x20rem\
    ove\x20an\x20ACL.\x20They\n\x20may\x20also\x20modify\x20all\x20tuples\
    \x20related\x20to\x20an\x20object\x20via\x20a\x20read-modify-write\n\x20\
    process\x20with\x20optimistic\x20concurrency\x20control\x20[21]\x20that\
    \x20uses\x20a\x20read\x20RPC\n\x20followed\x20by\x20a\x20write\x20RPC:\n\
    \n\x201.\x20Read\x20all\x20relation\x20tuples\x20of\x20an\x20object,\x20\
    including\x20a\x20per-object\x20\xe2\x80\x9clock\xe2\x80\x9d\n\x20\x20\
    \x20\x20tuple.\n\x202.\x20Generate\x20the\x20tuples\x20to\x20write\x20or\
    \x20delete.\x20Send\x20the\x20writes,\x20along\x20with\x20a\n\x20\x20\
    \x20\x20touch\x20on\x20the\x20lock\x20tuple,\x20to\x20Zanzibar,\x20with\
    \x20the\x20condition\x20that\x20the\n\x20\x20\x20\x20writes\x20will\x20b\
    e\x20committed\x20only\x20if\x20the\x20lock\x20tuple\x20has\x20not\x20be\
    en\x20modified\n\x20\x20\x20\x20since\x20the\x20read.\n\x203.\x20If\x20t\
    he\x20write\x20condition\x20is\x20not\x20met,\x20go\x20back\x20to\x20ste\
    p\x201.\n\x20\x20\x20\x20The\x20lock\x20tuple\x20is\x20just\x20a\x20regu\
    lar\x20relation\x20tuple\x20used\x20by\x20clients\x20to\n\x20\x20\x20\
    \x20detect\x20write\x20races.\n\n\x20The\x20lock\x20tuple\x20is\x20just\
    \x20a\x20regular\x20relation\x20tuple\x20used\x20by\x20clients\x20to\n\
    \x20detect\x20write\x20races.\n\"\x20\x20To\x20be\x20bounded\x20by\x20co\
    nfiguration\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03A\x02\n\n\x0c\n\x05\
    \x04\x03\x02\0\x06\x12\x03A\x0b\x18\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03A\x19)\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03A,-\n\x0b\n\x04\x04\x03\
    \x02\x01\x12\x03B\x02+\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03B\x02\n\n\
    \x0c\n\x05\x04\x03\x02\x01\x06\x12\x03B\x0b\x1e\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03B\x1f&\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03B)*\n\t\n\
    \x02\x04\x04\x12\x03E\0.\n\n\n\x03\x04\x04\x01\x12\x03E\x08\x15\n\x0b\n\
    \x04\x04\x04\x02\0\x12\x03E\x18,\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03E\
    \x18\x1e\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03E\x1f'\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03E*+\n\n\n\x02\x04\x05\x12\x04G\0N\x01\n\n\n\x03\x04\
    \x05\x01\x12\x03G\x08\x14\n\xd5\x01\n\x04\x04\x05\x02\0\x12\x03K\x02%\
    \x1a\xc7\x01\x20A\x20check\x20request\x20specifies\x20a\x20userset,\x20r\
    epresented\x20by\x20\xe2\x9f\xa8object#relation\xe2\x9f\xa9,\n\x20a\x20p\
    utative\x20user,\x20often\x20represented\x20by\x20an\x20authentication\
    \x20token,\x20and\x20a\n\x20zookie\x20corresponding\x20to\x20the\x20desi\
    red\x20object\x20version.\n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03K\x02\
    \x13\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03K\x14\x20\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03K#$\n*\n\x04\x04\x05\x02\x01\x12\x03L\x02\x10\"\x1d\
    \x20TODO\x20swap\x20for\x20putative\x20user\n\n\x0c\n\x05\x04\x05\x02\
    \x01\x06\x12\x03L\x02\x06\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03L\x07\
    \x0b\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03L\x0e\x0f\n\x0b\n\x04\x04\
    \x05\x02\x02\x12\x03M\x02\x19\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x03M\
    \x02\x08\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03M\t\x14\n\x0c\n\x05\x04\
    \x05\x02\x02\x03\x12\x03M\x17\x18\n\n\n\x02\x04\x06\x12\x04P\0V\x01\n\n\
    \n\x03\x04\x06\x01\x12\x03P\x08!\n\xeb\x01\n\x04\x04\x06\x02\0\x12\x03T\
    \x02%\x1a\xdd\x01\x20To\x20authorize\x20application\x20content\x20modifi\
    cations,\x20our\x20clients\x20send\x20a\x20special\n\x20type\x20of\x20ch\
    eck\x20request,\x20a\x20content-change\x20check.\x20A\x20content-change\
    \x20check\n\x20request\x20does\x20not\x20carry\x20a\x20zookie\x20and\x20\
    is\x20evaluated\x20at\x20the\x20latest\x20snapshot.\n\n\x0c\n\x05\x04\
    \x06\x02\0\x06\x12\x03T\x02\x13\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03T\
    \x14\x20\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03T#$\n,\n\x04\x04\x06\x02\
    \x01\x12\x03U\x02\x10\"\x1f\x20TODO\x20swap\x20for\x20a\x20putative\x20u\
    ser\n\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03U\x02\x06\n\x0c\n\x05\x04\
    \x06\x02\x01\x01\x12\x03U\x07\x0b\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\
    \x03U\x0e\x0f\n\n\n\x02\x04\x07\x12\x04X\0[\x01\n\n\n\x03\x04\x07\x01\
    \x12\x03X\x08\x15\n\x0b\n\x04\x04\x07\x02\0\x12\x03Y\x02\x15\n\x0c\n\x05\
    \x04\x07\x02\0\x05\x12\x03Y\x02\x06\n\x0c\n\x05\x04\x07\x02\0\x01\x12\
    \x03Y\x07\x10\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03Y\x13\x14\n\x0b\n\x04\
    \x04\x07\x02\x01\x12\x03Z\x02\x16\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\
    \x03Z\x02\x08\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03Z\t\x11\n\x0c\n\x05\
    \x04\x07\x02\x01\x03\x12\x03Z\x14\x15\n\n\n\x02\x04\x08\x12\x04]\0c\x01\
    \n\n\n\x03\x04\x08\x01\x12\x03]\x08\x15\n\xdb\x01\n\x04\x04\x08\x02\0\
    \x12\x03a\x02\x20\x1a\xcd\x01\x20The\x20Expand\x20API\x20returns\x20the\
    \x20effective\x20userset\x20given\x20an\x20\xe2\x9f\xa8object#relation\
    \xe2\x9f\xa9\n\x20pair\x20and\x20an\x20optional\x20zookie.\x20Unlike\x20\
    the\x20Read\x20API,\x20Expand\x20follows\x20indirect\n\x20references\x20\
    expressed\x20through\x20userset\x20rewrite\x20rules.\n\n\x0c\n\x05\x04\
    \x08\x02\0\x06\x12\x03a\x02\x13\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03a\
    \x14\x1b\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03a\x1e\x1f\n\x0b\n\x04\x04\
    \x08\x02\x01\x12\x03b\x02\x19\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03b\
    \x02\x08\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03b\t\x14\n\x0c\n\x05\x04\
    \x08\x02\x01\x03\x12\x03b\x17\x18\n\n\n\x02\x04\t\x12\x04e\0k\x01\n\n\n\
    \x03\x04\t\x01\x12\x03e\x08\x16\n\xe4\x01\n\x04\x04\t\x02\0\x12\x03i\x02\
    &\x1a\xd6\x01\x20The\x20result\x20is\x20represented\x20by\x20a\x20userse\
    t\x20tree\x20whose\x20leaf\x20nodes\x20are\x20user\x20IDs\n\x20or\x20use\
    rsets\x20pointing\x20to\x20other\x20\xe2\x9f\xa8object#relation\xe2\x9f\
    \xa9\x20pairs,\x20and\x20intermediate\n\x20nodes\x20represent\x20union,\
    \x20intersection,\x20or\x20exclusion\x20operators.\n\n\x0c\n\x05\x04\t\
    \x02\0\x06\x12\x03i\x02\x17\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03i\x18!\n\
    \x0c\n\x05\x04\t\x02\0\x03\x12\x03i$%\n\x0b\n\x04\x04\t\x02\x01\x12\x03j\
    \x02\x16\n\x0c\n\x05\x04\t\x02\x01\x06\x12\x03j\x02\x08\n\x0c\n\x05\x04\
    \t\x02\x01\x01\x12\x03j\t\x11\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03j\x14\
    \x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
