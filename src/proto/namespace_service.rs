// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `arrakisapi/api/namespace_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct ReadConfigRequest {
    // message fields
    pub namespace: ::std::string::String,
    pub at_revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadConfigRequest {
    fn default() -> &'a ReadConfigRequest {
        <ReadConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadConfigRequest {
    pub fn new() -> ReadConfigRequest {
        ::std::default::Default::default()
    }

    // string namespace = 1;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // .Zookie at_revision = 2;


    pub fn get_at_revision(&self) -> &super::core::Zookie {
        self.at_revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_at_revision(&mut self) {
        self.at_revision.clear();
    }

    pub fn has_at_revision(&self) -> bool {
        self.at_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_at_revision(&mut self, v: super::core::Zookie) {
        self.at_revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_at_revision(&mut self) -> &mut super::core::Zookie {
        if self.at_revision.is_none() {
            self.at_revision.set_default();
        }
        self.at_revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_at_revision(&mut self) -> super::core::Zookie {
        self.at_revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for ReadConfigRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.at_revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.at_revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.namespace);
        }
        if let Some(ref v) = self.at_revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.namespace.is_empty() {
            os.write_string(1, &self.namespace)?;
        }
        if let Some(ref v) = self.at_revision.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadConfigRequest {
        ReadConfigRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &ReadConfigRequest| { &m.namespace },
                |m: &mut ReadConfigRequest| { &mut m.namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "at_revision",
                |m: &ReadConfigRequest| { &m.at_revision },
                |m: &mut ReadConfigRequest| { &mut m.at_revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadConfigRequest>(
                "ReadConfigRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadConfigRequest {
        static instance: ::protobuf::rt::LazyV2<ReadConfigRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadConfigRequest::new)
    }
}

impl ::protobuf::Clear for ReadConfigRequest {
    fn clear(&mut self) {
        self.namespace.clear();
        self.at_revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadConfigRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadConfigResponse {
    // message fields
    pub namespace: ::std::string::String,
    pub config: ::protobuf::SingularPtrField<super::namespace::NamespaceDefinition>,
    pub revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadConfigResponse {
    fn default() -> &'a ReadConfigResponse {
        <ReadConfigResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadConfigResponse {
    pub fn new() -> ReadConfigResponse {
        ::std::default::Default::default()
    }

    // string namespace = 1;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // .NamespaceDefinition config = 2;


    pub fn get_config(&self) -> &super::namespace::NamespaceDefinition {
        self.config.as_ref().unwrap_or_else(|| <super::namespace::NamespaceDefinition as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: super::namespace::NamespaceDefinition) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut super::namespace::NamespaceDefinition {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> super::namespace::NamespaceDefinition {
        self.config.take().unwrap_or_else(|| super::namespace::NamespaceDefinition::new())
    }

    // .Zookie revision = 4;


    pub fn get_revision(&self) -> &super::core::Zookie {
        self.revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_revision(&mut self) {
        self.revision.clear();
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: super::core::Zookie) {
        self.revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revision(&mut self) -> &mut super::core::Zookie {
        if self.revision.is_none() {
            self.revision.set_default();
        }
        self.revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_revision(&mut self) -> super::core::Zookie {
        self.revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for ReadConfigResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.namespace);
        }
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.namespace.is_empty() {
            os.write_string(1, &self.namespace)?;
        }
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.revision.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadConfigResponse {
        ReadConfigResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &ReadConfigResponse| { &m.namespace },
                |m: &mut ReadConfigResponse| { &mut m.namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::namespace::NamespaceDefinition>>(
                "config",
                |m: &ReadConfigResponse| { &m.config },
                |m: &mut ReadConfigResponse| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "revision",
                |m: &ReadConfigResponse| { &m.revision },
                |m: &mut ReadConfigResponse| { &mut m.revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadConfigResponse>(
                "ReadConfigResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadConfigResponse {
        static instance: ::protobuf::rt::LazyV2<ReadConfigResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadConfigResponse::new)
    }
}

impl ::protobuf::Clear for ReadConfigResponse {
    fn clear(&mut self) {
        self.namespace.clear();
        self.config.clear();
        self.revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadConfigResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadConfigResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteConfigRequest {
    // message fields
    pub config: ::protobuf::SingularPtrField<super::namespace::NamespaceDefinition>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteConfigRequest {
    fn default() -> &'a WriteConfigRequest {
        <WriteConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteConfigRequest {
    pub fn new() -> WriteConfigRequest {
        ::std::default::Default::default()
    }

    // .NamespaceDefinition config = 2;


    pub fn get_config(&self) -> &super::namespace::NamespaceDefinition {
        self.config.as_ref().unwrap_or_else(|| <super::namespace::NamespaceDefinition as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: super::namespace::NamespaceDefinition) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut super::namespace::NamespaceDefinition {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> super::namespace::NamespaceDefinition {
        self.config.take().unwrap_or_else(|| super::namespace::NamespaceDefinition::new())
    }
}

impl ::protobuf::Message for WriteConfigRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteConfigRequest {
        WriteConfigRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::namespace::NamespaceDefinition>>(
                "config",
                |m: &WriteConfigRequest| { &m.config },
                |m: &mut WriteConfigRequest| { &mut m.config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteConfigRequest>(
                "WriteConfigRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteConfigRequest {
        static instance: ::protobuf::rt::LazyV2<WriteConfigRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteConfigRequest::new)
    }
}

impl ::protobuf::Clear for WriteConfigRequest {
    fn clear(&mut self) {
        self.config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteConfigRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteConfigResponse {
    // message fields
    pub revision: ::protobuf::SingularPtrField<super::core::Zookie>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteConfigResponse {
    fn default() -> &'a WriteConfigResponse {
        <WriteConfigResponse as ::protobuf::Message>::default_instance()
    }
}

impl WriteConfigResponse {
    pub fn new() -> WriteConfigResponse {
        ::std::default::Default::default()
    }

    // .Zookie revision = 1;


    pub fn get_revision(&self) -> &super::core::Zookie {
        self.revision.as_ref().unwrap_or_else(|| <super::core::Zookie as ::protobuf::Message>::default_instance())
    }
    pub fn clear_revision(&mut self) {
        self.revision.clear();
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: super::core::Zookie) {
        self.revision = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revision(&mut self) -> &mut super::core::Zookie {
        if self.revision.is_none() {
            self.revision.set_default();
        }
        self.revision.as_mut().unwrap()
    }

    // Take field
    pub fn take_revision(&mut self) -> super::core::Zookie {
        self.revision.take().unwrap_or_else(|| super::core::Zookie::new())
    }
}

impl ::protobuf::Message for WriteConfigResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.revision {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.revision)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.revision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.revision.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteConfigResponse {
        WriteConfigResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Zookie>>(
                "revision",
                |m: &WriteConfigResponse| { &m.revision },
                |m: &mut WriteConfigResponse| { &mut m.revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteConfigResponse>(
                "WriteConfigResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteConfigResponse {
        static instance: ::protobuf::rt::LazyV2<WriteConfigResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteConfigResponse::new)
    }
}

impl ::protobuf::Clear for WriteConfigResponse {
    fn clear(&mut self) {
        self.revision.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteConfigResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteConfigResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&arrakisapi/api/namespace_service.proto\x1a\x19arrakisapi/api/core.pro\
    to\x1a\x1earrakisapi/api/namespace.proto\"[\n\x11ReadConfigRequest\x12\
    \x1c\n\tnamespace\x18\x01\x20\x01(\tR\tnamespace\x12(\n\x0bat_revision\
    \x18\x02\x20\x01(\x0b2\x07.ZookieR\natRevision\"\x85\x01\n\x12ReadConfig\
    Response\x12\x1c\n\tnamespace\x18\x01\x20\x01(\tR\tnamespace\x12,\n\x06c\
    onfig\x18\x02\x20\x01(\x0b2\x14.NamespaceDefinitionR\x06config\x12#\n\
    \x08revision\x18\x04\x20\x01(\x0b2\x07.ZookieR\x08revision\"B\n\x12Write\
    ConfigRequest\x12,\n\x06config\x18\x02\x20\x01(\x0b2\x14.NamespaceDefini\
    tionR\x06config\":\n\x13WriteConfigResponse\x12#\n\x08revision\x18\x01\
    \x20\x01(\x0b2\x07.ZookieR\x08revision2\x87\x01\n\x10NamespaceService\
    \x127\n\nReadConfig\x12\x12.ReadConfigRequest\x1a\x13.ReadConfigResponse\
    \"\0\x12:\n\x0bWriteConfig\x12\x13.WriteConfigRequest\x1a\x14.WriteConfi\
    gResponse\"\0B&Z$github.com/petricorp/code/arrakisapiJ\xa2\x05\n\x06\x12\
    \x04\0\0\x194\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\
    \x02\0;\n\t\n\x02\x08\x0b\x12\x03\x02\0;\n\t\n\x02\x03\0\x12\x03\x04\0#\
    \n\t\n\x02\x03\x01\x12\x03\x05\0(\n\n\n\x02\x06\0\x12\x04\x07\0\n\x01\n\
    \n\n\x03\x06\0\x01\x12\x03\x07\x08\x18\n\x0b\n\x04\x06\0\x02\0\x12\x03\
    \x08\x02B\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x08\x06\x10\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x08\x11\"\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x08,>\n\x0b\n\x04\x06\0\x02\x01\x12\x03\t\x02E\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\t\x06\x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\t\x12$\
    \n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\t.A\n\n\n\x02\x04\0\x12\x04\x0c\0\
    \x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x19\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\r\x02\x17\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\r\t\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \r\x15\x16\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0e\x02\x19\n\x0c\n\x05\x04\
    \0\x02\x01\x06\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x0e\t\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e\x17\x18\n\n\n\x02\
    \x04\x01\x12\x04\x11\0\x15\x01\n\n\n\x03\x04\x01\x01\x12\x03\x11\x08\x1a\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\x12\x02\x17\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x12\t\x12\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x12\x15\x16\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x13\x02!\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x13\
    \x02\x15\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x13\x16\x1c\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x13\x1f\x20\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x14\x02\x16\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x14\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x14\t\x11\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x14\x14\x15\n\t\n\x02\x04\x02\x12\x03\x17\0>\n\n\n\x03\
    \x04\x02\x01\x12\x03\x17\x08\x1a\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x17\
    \x1d<\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x17\x1d0\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03\x1717\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x17:;\n\t\
    \n\x02\x04\x03\x12\x03\x19\04\n\n\n\x03\x04\x03\x01\x12\x03\x19\x08\x1b\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x03\x19\x1e2\n\x0c\n\x05\x04\x03\x02\0\
    \x06\x12\x03\x19\x1e$\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x19%-\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03\x1901b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
